import{_ as o,c as a,o as t,ag as i}from"./chunks/framework.DRADY2L-.js";const p=JSON.parse('{"title":"5.1 Migration Guide","description":"","frontmatter":{},"headers":[],"relativePath":"en/appendices/5-1-migration-guide.md","filePath":"en/appendices/5-1-migration-guide.md","lastUpdated":null}'),d={name:"en/appendices/5-1-migration-guide.md"};function n(r,e,l,c,s,u){return t(),a("div",null,[...e[0]||(e[0]=[i('<h1 id="_5-1-migration-guide" tabindex="-1">5.1 Migration Guide <a class="header-anchor" href="#_5-1-migration-guide" aria-label="Permalink to &quot;5.1 Migration Guide&quot;">​</a></h1><p>The 5.1.0 release is a backwards compatible with 5.0. It adds new functionality and introduces new deprecations. Any functionality deprecated in 5.x will be removed in 6.0.0.</p><h2 id="behavior-changes" tabindex="-1">Behavior Changes <a class="header-anchor" href="#behavior-changes" aria-label="Permalink to &quot;Behavior Changes&quot;">​</a></h2><ul><li>Connection now creates unique read and write drivers if the keys <code>read</code> or <code>write</code> are present in the config regardless of values.</li><li>FormHelper no longer generates <code>aria-required</code> attributes on input elements that also have the <code>required</code> attribute set. The <code>aria-required</code> attribute is redundant on these elements and generates HTML validation warnings. If you are using <code>aria-required</code> attribute in styling or scripting you&#39;ll need to update your application.</li><li>Adding associations with duplicate names will now raise exceptions. You can use <code>$table-&gt;associations()-&gt;has()</code> to conditionally define associations if required.</li><li>Text Utility and TextHelper methods around truncation and maximum length are using a UTF-8 character for <code>ellipsis</code> instead of <code>...</code> legacy characters.</li><li><code>TableSchema::setColumnType()</code> now throws an exception if the specified column does not exist.</li><li><code>PluginCollection::addPlugin()</code> now throws an exception if a plugin of the same name is already added.</li><li><code>TestCase::loadPlugins()</code> will now clear out any previously loaded plugins. So you must specify all plugins required for any subsequent tests.</li><li>The hashing algorithm for <code>Cache</code> configurations that use <code>groups</code>. Any keys will have new group prefix hashes generated which will cause cache misses. Consider an incremental deploy to avoid operating on an entirely cold cache.</li><li><code>FormHelper::getFormProtector()</code> now returns <code>null</code> in addition to its previous types. This allows dynamic view code to run with fewer errors and shouldn&#39;t impact most applications.</li><li>The default value for <code>valueSeparator</code> in <code>Table::findList()</code> is now a single space instead of <code>;</code>.</li><li><code>ErrorLogger</code> uses <code>Psr\\Log\\LogTrait</code> now.</li><li><code>Database\\QueryCompiler::$_orderedUnion</code> was removed.</li></ul><h2 id="deprecations" tabindex="-1">Deprecations <a class="header-anchor" href="#deprecations" aria-label="Permalink to &quot;Deprecations&quot;">​</a></h2><h3 id="i18n" tabindex="-1">I18n <a class="header-anchor" href="#i18n" aria-label="Permalink to &quot;I18n&quot;">​</a></h3><ul><li>The <code>_cake_core_</code> cache config key has been renamed to <code>_cake_translations_</code>.</li></ul><h3 id="mailer" tabindex="-1">Mailer <a class="header-anchor" href="#mailer" aria-label="Permalink to &quot;Mailer&quot;">​</a></h3><ul><li><code>Mailer::setMessage()</code> is deprecated. It has unintuitive behavior and very low usage.</li></ul><h2 id="new-features" tabindex="-1">New Features <a class="header-anchor" href="#new-features" aria-label="Permalink to &quot;New Features&quot;">​</a></h2><h3 id="cache" tabindex="-1">Cache <a class="header-anchor" href="#cache" aria-label="Permalink to &quot;Cache&quot;">​</a></h3><ul><li><code>RedisEngine</code> now supports a <code>tls</code> option that enables connecting to redis over a TLS connection. You can use the <code>ssl_ca</code>, <code>ssl_cert</code> and <code>ssl_key</code> options to define the TLS context for redis.</li></ul><h3 id="command" tabindex="-1">Command <a class="header-anchor" href="#command" aria-label="Permalink to &quot;Command&quot;">​</a></h3><ul><li><code>bin/cake plugin list</code> has been added to list all available plugins, their load configuration and version.</li><li>Optional <code>Command</code> arguments can now have a <code>default</code> value.</li><li><code>BannerHelper</code> was added. This command helper can format text as a banner with a coloured background and padding.</li><li>Additional default styles for <code>info.bg</code>, <code>warning.bg</code>, <code>error.bg</code> and <code>success.bg</code> were added to <code>ConsoleOutput</code>.</li></ul><h3 id="console" tabindex="-1">Console <a class="header-anchor" href="#console" aria-label="Permalink to &quot;Console&quot;">​</a></h3><ul><li><code>Arguments::getBooleanOption()</code> and <code>Arguments::getMultipleOption()</code> were added.</li><li><code>Arguments::getArgument()</code> will now raise an exception if an unknown argument name is provided. This helps prevent mixing up option/argument names.</li></ul><h3 id="controller" tabindex="-1">Controller <a class="header-anchor" href="#controller" aria-label="Permalink to &quot;Controller&quot;">​</a></h3><ul><li>Components can now use the DI container to have dependencies resolved and provided as constructor parameters just like Controllers and Commands do.</li></ul><h3 id="core" tabindex="-1">Core <a class="header-anchor" href="#core" aria-label="Permalink to &quot;Core&quot;">​</a></h3><ul><li><code>PluginConfig</code> was added. Use this class to get all available plugins, their load config and versions.</li><li>The <code>toString</code>, <code>toInt</code>, <code>toBool</code> functions were added. They give you a typesafe way to cast request data or other input and return <code>null</code> when conversion fails.</li><li><code>pathCombine()</code> was added to help build paths without worrying about duplicate and trailing slashes.</li><li>A new <code>events</code> hook was added to the <code>BaseApplication</code> as well as the <code>BasePlugin</code> class. This hook is the recommended way to register global event listeners for you application. See <a href="/en/core-libraries/events.html#registering-event-listeners">Registering Listeners</a></li></ul><h3 id="database" tabindex="-1">Database <a class="header-anchor" href="#database" aria-label="Permalink to &quot;Database&quot;">​</a></h3><ul><li>Support for <code>point</code>, <code>linestring</code>, <code>polygon</code> and <code>geometry</code> types were added. These types are useful when working with geospatial or cartesian co-ordinates. Sqlite support uses text columns under the hood and lacks functions to manipulate data as geospatial values.</li><li><code>SelectQuery::__debugInfo()</code> now includes which connection role the query is for.</li><li><code>SelectQuery::intersect()</code> and <code>SelectQuery::intersectAll()</code> were added. These methods enable queries using <code>INTERSECT</code> and <code>INTERSECT ALL</code> conjunctions to be expressed.</li><li>New supports features were added for <code>intersect</code>, <code>intersect-all</code> and <code>set-operations-order-by</code> features.</li><li>The ability to fetch records without buffering which existed in 4.x has been restored. Methods <code>SelectQuery::enableBufferedResults()</code>, <code>SelectQuery::disableBufferedResults()</code> and <code>SelectQuery::isBufferedResultsEnabled()</code> have been re-added.</li></ul><h3 id="datasource" tabindex="-1">Datasource <a class="header-anchor" href="#datasource" aria-label="Permalink to &quot;Datasource&quot;">​</a></h3><ul><li><code>RulesChecker::remove()</code>, <code>removeCreate()</code>, <code>removeUpdate()</code>, and <code>removeDelete()</code> methods were added. These methods allow you to remove rules by name.</li></ul><h3 id="http" tabindex="-1">Http <a class="header-anchor" href="#http" aria-label="Permalink to &quot;Http&quot;">​</a></h3><ul><li><code>SecurityHeadersMiddleware::setPermissionsPolicy()</code> was added. This method adds the ability to define <code>permissions-policy</code> header values.</li><li><code>Client</code> now emits <code>HttpClient.beforeSend</code> and <code>HttpClient.afterSend</code> events when requests are sent. You can use these events to perform logging, caching or collect telemetry.</li><li><code>Http\\Server::terminate()</code> was added. This method triggers the <code>Server.terminate</code> event which can be used to run logic after the response has been sent in fastcgi environments. In other environments the <code>Server.terminate</code> event runs <em>before</em> the response has been sent.</li></ul><h3 id="i18n-1" tabindex="-1">I18n <a class="header-anchor" href="#i18n-1" aria-label="Permalink to &quot;I18n&quot;">​</a></h3><ul><li><code>Number::formatter()</code> and <code>currency()</code> now accept a <code>roundingMode</code> option to override how rounding is done.</li><li>The <code>toDate</code>, and <code>toDateTime</code> functions were added. They give you a typesafe way to cast request data or other input and return <code>null</code> when conversion fails.</li></ul><h3 id="orm" tabindex="-1">ORM <a class="header-anchor" href="#orm" aria-label="Permalink to &quot;ORM&quot;">​</a></h3><ul><li>Setting the <code>preserveKeys</code> option on association finder queries. This can be used with <code>formatResults()</code> to replace association finder results with an associative array.</li><li>SQLite columns with names containing <code>json</code> can now be mapped to <code>JsonType</code>. This is currently an opt-in feature which is enabled by setting the <code>ORM.mapJsonTypeForSqlite</code> configure value to <code>true</code> in your app.</li></ul><h3 id="testsuite" tabindex="-1">TestSuite <a class="header-anchor" href="#testsuite" aria-label="Permalink to &quot;TestSuite&quot;">​</a></h3><ul><li>CakePHP as well as the app template have been updated to use PHPUnit <code>^10.5.5 || ^11.1.3&quot;</code>.</li><li><code>ConnectionHelper</code> methods are now all static. This class has no state and its methods were updated to be static.</li><li><code>LogTestTrait</code> was added. This new trait makes it easy to capture logs in your tests and make assertions on the presence or absence of log messages.</li><li><code>IntegrationTestTrait::replaceRequest()</code> was added.</li></ul><h3 id="utility" tabindex="-1">Utility <a class="header-anchor" href="#utility" aria-label="Permalink to &quot;Utility&quot;">​</a></h3><ul><li><code>Hash::insert()</code> and <code>Hash::remove()</code> now accept <code>ArrayAccess</code> objects along with <code>array</code> data.</li></ul><h3 id="validation" tabindex="-1">Validation <a class="header-anchor" href="#validation" aria-label="Permalink to &quot;Validation&quot;">​</a></h3><ul><li><code>Validation::enum()</code> and <code>Validator::enum()</code> were added. These validation methods simplify validating backed enum values.</li><li><code>Validation::enumOnly()</code> and <code>Validation::enumExcept()</code> were added to check for specific cases and further simplify validating backed enum values.</li></ul><h3 id="view" tabindex="-1">View <a class="header-anchor" href="#view" aria-label="Permalink to &quot;View&quot;">​</a></h3><ul><li>View cells now emit events around their actions <code>Cell.beforeAction</code> and <code>Cell.afterAction</code>.</li><li><code>NumberHelper::format()</code> now accepts a <code>roundingMode</code> option to override how rounding is done.</li></ul><h3 id="helpers" tabindex="-1">Helpers <a class="header-anchor" href="#helpers" aria-label="Permalink to &quot;Helpers&quot;">​</a></h3><ul><li><code>TextHelper::autoLinkUrls()</code> has options added for better link label printing: <ul><li>``stripProtocol<code>: Strips </code><a href="http://%60" target="_blank" rel="noreferrer">http://`</a> and <code>https://</code> from the beginning of the link. Default off.</li><li><code>maxLength</code>: The maximum length of the link label. Default off.</li><li><code>ellipsis</code>: The string to append to the end of the link label. Defaults to UTF8 version.</li></ul></li><li><code>HtmlHelper::meta()</code> can now create a meta tag containing the current CSRF token using `meta(&#39;csrfToken&#39;)``.</li></ul>',40)])])}const m=o(d,[["render",n]]);export{p as __pageData,m as default};
