import{_ as i,c as e,o as s,ag as t}from"./chunks/framework.DRADY2L-.js";const k=JSON.parse('{"title":"Inflector","description":"","frontmatter":{"title":"Inflector","keywords":"apple orange,word variations,apple pie,person man,latin versions,profile settings,php class,initial state,puree,slug,apples,oranges,user profile,underscore"},"headers":[],"relativePath":"en/core-libraries/inflector.md","filePath":"en/core-libraries/inflector.md","lastUpdated":null}'),n={name:"en/core-libraries/inflector.md"};function l(r,a,d,h,o,p){return s(),e("div",null,[...a[0]||(a[0]=[t('<h1 id="inflector" tabindex="-1">Inflector <a class="header-anchor" href="#inflector" aria-label="Permalink to &quot;Inflector&quot;">​</a></h1><p><strong>Namespace:</strong> <code>Cake\\Utility</code></p><h3 id="class-cake-utility-inflector" tabindex="-1">Class <code>Cake\\Utility\\Inflector</code> <a class="header-anchor" href="#class-cake-utility-inflector" aria-label="Permalink to &quot;Class `Cake\\Utility\\Inflector`&quot;">​</a></h3><p>The Inflector class takes a string and can manipulate it to handle word variations such as pluralization or camelizing and is normally accessed statically. Example: <code>Inflector::pluralize(&#39;example&#39;)</code> returns &quot;examples&quot;.</p><p>You can try out the inflections online at <a href="https://inflector.cakephp.org/" target="_blank" rel="noreferrer">inflector.cakephp.org</a> or <a href="https://sandbox.dereuromark.de/sandbox/inflector" target="_blank" rel="noreferrer">sandbox.dereuromark.de</a>. <a id="inflector-methods-summary"></a></p><h2 id="summary-of-inflector-methods-and-their-output" tabindex="-1">Summary of Inflector Methods and Their Output <a class="header-anchor" href="#summary-of-inflector-methods-and-their-output" aria-label="Permalink to &quot;Summary of Inflector Methods and Their Output&quot;">​</a></h2><p>Quick summary of the Inflector built-in methods and the results they output when provided a multi-word argument:</p><table tabindex="0"><thead><tr><th>Method</th><th>Argument</th><th>Output</th></tr></thead><tbody><tr><td><code>pluralize()</code></td><td></td><td>igApple</td></tr><tr><td></td><td>--------------</td><td>--------------</td></tr><tr><td></td><td>big_apple</td><td>big_apples</td></tr><tr><td><code>singularize()</code></td><td></td><td>igApples</td></tr><tr><td></td><td>--------------</td><td>--------------</td></tr><tr><td></td><td>big_apples</td><td>big_apple</td></tr><tr><td><code>camelize()</code></td><td></td><td>ig_apples</td></tr><tr><td></td><td>--------------</td><td>--------------</td></tr><tr><td></td><td>big apple</td><td>BigApple</td></tr><tr><td><code>underscore()</code></td><td></td><td>igApples</td></tr><tr><td></td><td>--------------</td><td>--------------</td></tr><tr><td></td><td>Big Apples</td><td>big apples</td></tr><tr><td><code>humanize()</code></td><td></td><td>ig_apples</td></tr><tr><td></td><td>--------------</td><td>--------------</td></tr><tr><td></td><td>bigApple</td><td>BigApple</td></tr><tr><td><code>classify()</code></td><td></td><td>ig_apples</td></tr><tr><td></td><td>--------------</td><td>--------------</td></tr><tr><td></td><td>big apple</td><td>BigApple</td></tr><tr><td><code>dasherize()</code></td><td></td><td>igApples</td></tr><tr><td></td><td>--------------</td><td>--------------</td></tr><tr><td></td><td>big apple</td><td>big apple</td></tr><tr><td><code>tableize()</code></td><td></td><td>igApple</td></tr><tr><td></td><td>--------------</td><td>--------------</td></tr><tr><td></td><td>Big Apple</td><td>big apples</td></tr><tr><td><code>variable()</code></td><td></td><td>ig_apple</td></tr><tr><td></td><td>--------------</td><td>--------------</td></tr><tr><td></td><td>big apples</td><td>bigApples</td></tr></tbody></table><h2 id="creating-plural-singular-forms" tabindex="-1">Creating Plural &amp; Singular Forms <a class="header-anchor" href="#creating-plural-singular-forms" aria-label="Permalink to &quot;Creating Plural &amp; Singular Forms&quot;">​</a></h2><h4 id="static-method-cake-utility-inflector-singularize-singular" tabindex="-1">Static Method <code>Cake\\Utility\\Inflector::singularize($singular)</code> <a class="header-anchor" href="#static-method-cake-utility-inflector-singularize-singular" aria-label="Permalink to &quot;Static Method `Cake\\Utility\\Inflector::singularize($singular)`&quot;">​</a></h4><h4 id="static-method-cake-utility-inflector-pluralize-singular" tabindex="-1">Static Method <code>Cake\\Utility\\Inflector::pluralize($singular)</code> <a class="header-anchor" href="#static-method-cake-utility-inflector-pluralize-singular" aria-label="Permalink to &quot;Static Method `Cake\\Utility\\Inflector::pluralize($singular)`&quot;">​</a></h4><p>Both <code>pluralize</code> and <code>singularize()</code> work on most English nouns. If you need to support other languages, you can use <a href="/en/core-libraries/inflector.html#inflection-configuration">inflection-configuration</a> to customize the rules used</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Apples</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Inflector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pluralize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Apple&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p><code>pluralize()</code> should not be used on a noun that is already in its plural form.</p></div><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Person</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Inflector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">singularize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;People&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p><code>singularize()</code> should not be used on a noun that is already in its singular form.</p></div><h2 id="creating-camelcase-and-under-scored-forms" tabindex="-1">Creating CamelCase and under_scored Forms <a class="header-anchor" href="#creating-camelcase-and-under-scored-forms" aria-label="Permalink to &quot;Creating CamelCase and under_scored Forms&quot;">​</a></h2><h4 id="static-method-cake-utility-inflector-camelize-underscored" tabindex="-1">Static Method <code>Cake\\Utility\\Inflector::camelize($underscored)</code> <a class="header-anchor" href="#static-method-cake-utility-inflector-camelize-underscored" aria-label="Permalink to &quot;Static Method `Cake\\Utility\\Inflector::camelize($underscored)`&quot;">​</a></h4><h4 id="static-method-cake-utility-inflector-underscore-camelcase" tabindex="-1">Static Method <code>Cake\\Utility\\Inflector::underscore($camelCase)</code> <a class="header-anchor" href="#static-method-cake-utility-inflector-underscore-camelcase" aria-label="Permalink to &quot;Static Method `Cake\\Utility\\Inflector::underscore($camelCase)`&quot;">​</a></h4><p>These methods are useful when creating class names, or property names</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ApplePie</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Inflector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">camelize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Apple_pie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// apple_pie</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Inflector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">underscore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ApplePie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>It should be noted that underscore will only convert camelCase formatted words. Words that contains spaces will be lower-cased, but will not contain an underscore.</p><h2 id="creating-human-readable-forms" tabindex="-1">Creating Human Readable Forms <a class="header-anchor" href="#creating-human-readable-forms" aria-label="Permalink to &quot;Creating Human Readable Forms&quot;">​</a></h2><h4 id="static-method-cake-utility-inflector-humanize-underscored" tabindex="-1">Static Method <code>Cake\\Utility\\Inflector::humanize($underscored)</code> <a class="header-anchor" href="#static-method-cake-utility-inflector-humanize-underscored" aria-label="Permalink to &quot;Static Method `Cake\\Utility\\Inflector::humanize($underscored)`&quot;">​</a></h4><p>This method is useful when converting underscored forms into &quot;Title Case&quot; forms for human readable values</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Apple Pie</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Inflector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">humanize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;apple_pie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="creating-table-and-class-name-forms" tabindex="-1">Creating Table and Class Name Forms <a class="header-anchor" href="#creating-table-and-class-name-forms" aria-label="Permalink to &quot;Creating Table and Class Name Forms&quot;">​</a></h2><h4 id="static-method-cake-utility-inflector-classify-underscored" tabindex="-1">Static Method <code>Cake\\Utility\\Inflector::classify($underscored)</code> <a class="header-anchor" href="#static-method-cake-utility-inflector-classify-underscored" aria-label="Permalink to &quot;Static Method `Cake\\Utility\\Inflector::classify($underscored)`&quot;">​</a></h4><h4 id="static-method-cake-utility-inflector-dasherize-dashed" tabindex="-1">Static Method <code>Cake\\Utility\\Inflector::dasherize($dashed)</code> <a class="header-anchor" href="#static-method-cake-utility-inflector-dasherize-dashed" aria-label="Permalink to &quot;Static Method `Cake\\Utility\\Inflector::dasherize($dashed)`&quot;">​</a></h4><h4 id="static-method-cake-utility-inflector-tableize-camelcase" tabindex="-1">Static Method <code>Cake\\Utility\\Inflector::tableize($camelCase)</code> <a class="header-anchor" href="#static-method-cake-utility-inflector-tableize-camelcase" aria-label="Permalink to &quot;Static Method `Cake\\Utility\\Inflector::tableize($camelCase)`&quot;">​</a></h4><p>When generating code, or using CakePHP&#39;s conventions you may need to inflect table names or class names</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// UserProfileSetting</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Inflector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">classify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user_profile_settings&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// user-profile-setting</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Inflector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dasherize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;UserProfileSetting&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// user_profile_settings</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Inflector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tableize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;UserProfileSetting&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="creating-variable-names" tabindex="-1">Creating Variable Names <a class="header-anchor" href="#creating-variable-names" aria-label="Permalink to &quot;Creating Variable Names&quot;">​</a></h2><h4 id="static-method-cake-utility-inflector-variable-underscored" tabindex="-1">Static Method <code>Cake\\Utility\\Inflector::variable($underscored)</code> <a class="header-anchor" href="#static-method-cake-utility-inflector-variable-underscored" aria-label="Permalink to &quot;Static Method `Cake\\Utility\\Inflector::variable($underscored)`&quot;">​</a></h4><p>Variable names are often useful when doing meta-programming tasks that involve generating code or doing work based on conventions</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// applePie</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Inflector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">variable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;apple_pie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><a id="inflection-configuration"></a></p><h2 id="inflection-configuration" tabindex="-1">Inflection Configuration <a class="header-anchor" href="#inflection-configuration" aria-label="Permalink to &quot;Inflection Configuration&quot;">​</a></h2><p>CakePHP&#39;s naming conventions can be really nice - you can name your database table <code>big_boxes</code>, your model <code>BigBoxes</code>, your controller <code>BigBoxesController</code>, and everything just works together automatically. The way CakePHP knows how to tie things together is by <em>inflecting</em> the words between their singular and plural forms.</p><p>There are occasions (especially for our non-English speaking friends) where you may run into situations where CakePHP&#39;s inflector (the class that pluralizes, singularizes, camelCases, and under_scores) might not work as you&#39;d like. If CakePHP won&#39;t recognize your Foci or Fish, you can tell CakePHP about your special cases.</p><h3 id="loading-custom-inflections" tabindex="-1">Loading Custom Inflections <a class="header-anchor" href="#loading-custom-inflections" aria-label="Permalink to &quot;Loading Custom Inflections&quot;">​</a></h3><h4 id="static-method-cake-utility-inflector-rules-type-rules-reset-false" tabindex="-1">Static Method <code>Cake\\Utility\\Inflector::rules($type, $rules, $reset = false)</code> <a class="header-anchor" href="#static-method-cake-utility-inflector-rules-type-rules-reset-false" aria-label="Permalink to &quot;Static Method `Cake\\Utility\\Inflector::rules($type, $rules, $reset = false)`&quot;">​</a></h4><p>Define new inflection and transliteration rules for Inflector to use. Often, this method is used in your <strong>config/bootstrap.php</strong></p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Inflector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;singular&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(bil)er</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/i&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;\\1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(inflec|contribu)tors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/i&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;\\1ta&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Inflector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;uninflected&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;singulars&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Inflector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;irregular&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;phylum&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;phyla&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The key is singular form, value is plural form</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The supplied rules will be merged into the respective inflection sets defined in <code>Cake/Utility/Inflector</code>, with the added rules taking precedence over the core rules. You can use <code>Inflector::reset()</code> to clear rules and restore the original Inflector state.</p>',45)])])}const u=i(n,[["render",l]]);export{k as __pageData,u as default};
