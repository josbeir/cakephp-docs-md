import{_ as n,c as t,o,ag as a}from"./chunks/framework.DRADY2L-.js";const g=JSON.parse('{"title":"Global Constants and Functions","description":"","frontmatter":{"title":"Global Constants and Functions","keywords":"internationalization and localization,global constants,example config,array php,convenience functions,core libraries,component classes,optional number,global functions,string string,core classes,format strings,unread messages,placeholders,useful functions,arrays,parameters,existence,translations"},"headers":[],"relativePath":"en/core-libraries/global-constants-and-functions.md","filePath":"en/core-libraries/global-constants-and-functions.md","lastUpdated":null}'),i={name:"en/core-libraries/global-constants-and-functions.md"};function s(r,e,l,c,d,u){return o(),t("div",null,[...e[0]||(e[0]=[a('<h1 id="constants-functions" tabindex="-1">Constants &amp; Functions <a class="header-anchor" href="#constants-functions" aria-label="Permalink to &quot;Constants &amp; Functions&quot;">​</a></h1><p>While most of your day-to-day work in CakePHP will be utilizing core classes and methods, CakePHP features a number of global convenience functions that may come in handy. Many of these functions are for use with CakePHP classes (loading model or component classes), but many others make working with arrays or strings a little easier.</p><p>We&#39;ll also cover some of the constants available in CakePHP applications. Using these constants will help make upgrades more smooth, but are also convenient ways to point to certain files or directories in your CakePHP application.</p><h2 id="global-functions" tabindex="-1">Global Functions <a class="header-anchor" href="#global-functions" aria-label="Permalink to &quot;Global Functions&quot;">​</a></h2><p>Here are CakePHP&#39;s globally available functions. Most of them are just convenience wrappers for other CakePHP functionality, such as debugging and translating content. By default only namespaced functions are autoloaded, however you can optionally load global aliases by adding</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">require</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CAKE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;functions.php&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>To your application&#39;s <code>config/bootstrap.php</code>. Doing this will load global aliases for <em>all</em> functions listed below.</p><p><strong>Namespace:</strong> <code>Cake\\I18n</code></p><h4 id="function-string-string-id-formatargs" tabindex="-1">Function <code>\\_\\_(string $string_id, [$formatArgs])</code> <a class="header-anchor" href="#function-string-string-id-formatargs" aria-label="Permalink to &quot;Function `\\_\\_(string $string_id, [$formatArgs])`&quot;">​</a></h4><p>This function handles localization in CakePHP applications. The <code>$string_id</code> identifies the ID for a translation. You can supply additional arguments to replace placeholders in your string</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;You have {0} unread messages&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, $number);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>You can also provide a name-indexed array of replacements::</p><pre><code>    __(&#39;You have {unread} unread messages&#39;, [&#39;unread&#39; =&gt; $number]);\n</code></pre><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>Check out the [/core-libraries/internationalization-and-localization` section for more information.</p></div><h4 id="function-d-string-domain-string-msg-mixed-args-null" tabindex="-1">Function <code>__d(string $domain, string $msg, mixed $args = null)</code> <a class="header-anchor" href="#function-d-string-domain-string-msg-mixed-args-null" aria-label="Permalink to &quot;Function `__d(string $domain, string $msg, mixed $args = null)`&quot;">​</a></h4><p>Allows you to override the current domain for a single message lookup.</p><p>Useful when internationalizing a plugin: <code>echo __d(&#39;plugin_name&#39;, &#39;This is my plugin&#39;);</code></p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>Make sure to use the underscored version of the plugin name here as domain.</p></div><h4 id="function-dn-string-domain-string-singular-string-plural-integer-count-mixed-args-null" tabindex="-1">Function <code>__dn(string $domain, string $singular, string $plural, integer $count, mixed $args = null)</code> <a class="header-anchor" href="#function-dn-string-domain-string-singular-string-plural-integer-count-mixed-args-null" aria-label="Permalink to &quot;Function `__dn(string $domain, string $singular, string $plural, integer $count, mixed $args = null)`&quot;">​</a></h4><p>Allows you to override the current domain for a single plural message lookup. Returns correct plural form of message identified by <code>$singular</code> and <code>$plural</code> for count <code>$count</code> from domain <code>$domain</code>.</p><h4 id="function-dx-string-domain-string-context-string-msg-mixed-args-null" tabindex="-1">Function <code>__dx(string $domain, string $context, string $msg, mixed $args = null)</code> <a class="header-anchor" href="#function-dx-string-domain-string-context-string-msg-mixed-args-null" aria-label="Permalink to &quot;Function `__dx(string $domain, string $context, string $msg, mixed $args = null)`&quot;">​</a></h4><p>Allows you to override the current domain for a single message lookup. It also allows you to specify a context.</p><p>The context is a unique identifier for the translations string that makes it unique within the same domain.</p><h4 id="function-dxn-string-domain-string-context-string-singular-string-plural-integer-count-mixed-args-null" tabindex="-1">Function <code>__dxn(string $domain, string $context, string $singular, string $plural, integer $count, mixed $args = null)</code> <a class="header-anchor" href="#function-dxn-string-domain-string-context-string-singular-string-plural-integer-count-mixed-args-null" aria-label="Permalink to &quot;Function `__dxn(string $domain, string $context, string $singular, string $plural, integer $count, mixed $args = null)`&quot;">​</a></h4><p>Allows you to override the current domain for a single plural message lookup. It also allows you to specify a context. Returns correct plural form of message identified by <code>$singular</code> and <code>$plural</code> for count <code>$count</code> from domain <code>$domain</code>. Some languages have more than one form for plural messages dependent on the count.</p><p>The context is a unique identifier for the translations string that makes it unique within the same domain.</p><h4 id="function-n-string-singular-string-plural-integer-count-mixed-args-null" tabindex="-1">Function <code>__n(string $singular, string $plural, integer $count, mixed $args = null)</code> <a class="header-anchor" href="#function-n-string-singular-string-plural-integer-count-mixed-args-null" aria-label="Permalink to &quot;Function `__n(string $singular, string $plural, integer $count, mixed $args = null)`&quot;">​</a></h4><p>Returns correct plural form of message identified by <code>$singular</code> and <code>$plural</code> for count <code>$count</code>. Some languages have more than one form for plural messages dependent on the count.</p><h4 id="function-x-string-context-string-msg-mixed-args-null" tabindex="-1">Function <code>__x(string $context, string $msg, mixed $args = null)</code> <a class="header-anchor" href="#function-x-string-context-string-msg-mixed-args-null" aria-label="Permalink to &quot;Function `__x(string $context, string $msg, mixed $args = null)`&quot;">​</a></h4><p>The context is a unique identifier for the translations string that makes it unique within the same domain.</p><h4 id="function-xn-string-context-string-singular-string-plural-integer-count-mixed-args-null" tabindex="-1">Function <code>__xn(string $context, string $singular, string $plural, integer $count, mixed $args = null)</code> <a class="header-anchor" href="#function-xn-string-context-string-singular-string-plural-integer-count-mixed-args-null" aria-label="Permalink to &quot;Function `__xn(string $context, string $singular, string $plural, integer $count, mixed $args = null)`&quot;">​</a></h4><p>Returns correct plural form of message identified by <code>$singular</code> and <code>$plural</code> for count <code>$count</code> from domain <code>$domain</code>. It also allows you to specify a context. Some languages have more than one form for plural messages dependent on the count.</p><p>The context is a unique identifier for the translations string that makes it unique within the same domain.</p><p><strong>Namespace:</strong> <code>Cake\\Collection</code></p><h4 id="function-collection-mixed-items" tabindex="-1">Function <code>collection(mixed $items)</code> <a class="header-anchor" href="#function-collection-mixed-items" aria-label="Permalink to &quot;Function `collection(mixed $items)`&quot;">​</a></h4><p>Convenience wrapper for instantiating a new <code>Cake\\Collection\\Collection</code> object, wrapping the passed argument. The <code>$items</code> parameter takes either a <code>Traversable</code> object or an array.</p><p><strong>Namespace:</strong> <code>Cake\\Core</code></p><h4 id="function-debug-mixed-var-boolean-showhtml-null-showfrom-true" tabindex="-1">Function <code>debug(mixed $var, boolean $showHtml = null, $showFrom = true)</code> <a class="header-anchor" href="#function-debug-mixed-var-boolean-showhtml-null-showfrom-true" aria-label="Permalink to &quot;Function `debug(mixed $var, boolean $showHtml = null, $showFrom = true)`&quot;">​</a></h4><p>If the core <code>$debug</code> variable is <code>true</code>, <code>$var</code> is printed out. If <code>$showHTML</code> is <code>true</code> or left as <code>null</code>, the data is rendered to be browser-friendly. If <code>$showFrom</code> is not set to <code>false</code>, the debug output will start with the line from which it was called. Also see <a href="/en/development/debugging.html">development/debugging</a></p><h4 id="function-dd-mixed-var-boolean-showhtml-null" tabindex="-1">Function <code>dd(mixed $var, boolean $showHtml = null)</code> <a class="header-anchor" href="#function-dd-mixed-var-boolean-showhtml-null" aria-label="Permalink to &quot;Function `dd(mixed $var, boolean $showHtml = null)`&quot;">​</a></h4><p>It behaves like <code>debug()</code>, but execution is also halted. If the core <code>$debug</code> variable is <code>true</code>, <code>$var</code> is printed. If <code>$showHTML</code> is <code>true</code> or left as <code>null</code>, the data is rendered to be browser-friendly. Also see <a href="/en/development/debugging.html">development/debugging</a></p><h4 id="function-pr-mixed-var" tabindex="-1">Function <code>pr(mixed $var)</code> <a class="header-anchor" href="#function-pr-mixed-var" aria-label="Permalink to &quot;Function `pr(mixed $var)`&quot;">​</a></h4><p>Convenience wrapper for <code>print_r()</code>, with the addition of wrapping ``](/en/pre.md)` tags around the output.</p><h4 id="function-pj-mixed-var" tabindex="-1">Function <code>pj(mixed $var)</code> <a class="header-anchor" href="#function-pj-mixed-var" aria-label="Permalink to &quot;Function `pj(mixed $var)`&quot;">​</a></h4><p>JSON pretty print convenience function, with the addition of wrapping <code>&lt;pre&gt;</code> tags around the output.</p><p>It is meant for debugging the JSON representation of objects and arrays.</p><h4 id="function-env-string-key-string-default-null" tabindex="-1">Function <code>env(string $key, string $default = null)</code> <a class="header-anchor" href="#function-env-string-key-string-default-null" aria-label="Permalink to &quot;Function `env(string $key, string $default = null)`&quot;">​</a></h4><p>Gets an environment variable from available sources. Used as a backup if <code>$_SERVER</code> or <code>$_ENV</code> are disabled.</p><p>This function also emulates <code>PHP_SELF</code> and <code>DOCUMENT_ROOT</code> on unsupporting servers. In fact, it&#39;s a good idea to always use <code>env()</code> instead of <code>$_SERVER</code> or <code>getenv()</code> (especially if you plan to distribute the code), since it&#39;s a full emulation wrapper.</p><h4 id="function-h-string-text-boolean-double-true-string-charset-null" tabindex="-1">Function <code>h(string $text, boolean $double = true, string $charset = null)</code> <a class="header-anchor" href="#function-h-string-text-boolean-double-true-string-charset-null" aria-label="Permalink to &quot;Function `h(string $text, boolean $double = true, string $charset = null)`&quot;">​</a></h4><p>Convenience wrapper for <code>htmlspecialchars()</code>.</p><h4 id="function-pluginsplit-string-name-boolean-dotappend-false-string-plugin-null" tabindex="-1">Function <code>pluginSplit(string $name, boolean $dotAppend = false, string $plugin = null)</code> <a class="header-anchor" href="#function-pluginsplit-string-name-boolean-dotappend-false-string-plugin-null" aria-label="Permalink to &quot;Function `pluginSplit(string $name, boolean $dotAppend = false, string $plugin = null)`&quot;">​</a></h4><p>Splits a dot syntax plugin name into its plugin and class name. If <code>$name</code> does not have a dot, then index 0 will be <code>null</code>.</p><p>Commonly used like <code>list($plugin, $name) = pluginSplit(&#39;Users.User&#39;);</code></p><h4 id="function-namespacesplit-string-class" tabindex="-1">Function <code>namespaceSplit(string $class)</code> <a class="header-anchor" href="#function-namespacesplit-string-class" aria-label="Permalink to &quot;Function `namespaceSplit(string $class)`&quot;">​</a></h4><p>Split the namespace from the classname.</p><p>Commonly used like <code>list($namespace, $className) = namespaceSplit(&#39;Cake\\Core\\App&#39;);</code></p><h2 id="core-definition-constants" tabindex="-1">Core Definition Constants <a class="header-anchor" href="#core-definition-constants" aria-label="Permalink to &quot;Core Definition Constants&quot;">​</a></h2><p>Most of the following constants refer to paths in your application.</p><p>.. php:const:: APP</p><p>Absolute path to your application directory, including a trailing slash.</p><p>.. php:const:: APP_DIR</p><p>Equals <code>app</code> or the name of your application directory.</p><p>.. php:const:: CACHE</p><p>Path to the cache files directory. It can be shared between hosts in a multi-server setup.</p><p>.. php:const:: CAKE</p><p>Path to the cake directory.</p><p>.. php:const:: CAKE_CORE_INCLUDE_PATH</p><p>Path to the root lib directory.</p><p>.. php:const:: CONFIG</p><p>Path to the config directory.</p><p>.. php:const:: CORE_PATH</p><p>Path to the CakePHP directory with ending directory slash.</p><p>.. php:const:: DS</p><p>Short for PHP&#39;s <code>DIRECTORY_SEPARATOR</code>, which is <code>/</code> on Linux and <code>\\</code> on Windows.</p><p>.. php:const:: LOGS</p><p>Path to the logs directory.</p><p>.. php:const:: RESOURCES</p><p>Path to the resources directory.</p><p>.. php:const:: ROOT</p><p>Path to the root directory.</p><p>.. php:const:: TESTS</p><p>Path to the tests directory.</p><p>.. php:const:: TMP</p><p>Path to the temporary files directory.</p><p>.. php:const:: WWW_ROOT</p><p>Full path to the webroot.</p><h2 id="timing-definition-constants" tabindex="-1">Timing Definition Constants <a class="header-anchor" href="#timing-definition-constants" aria-label="Permalink to &quot;Timing Definition Constants&quot;">​</a></h2><p>.. php:const:: TIME_START</p><p>Unix timestamp in microseconds as a float from when the application started.</p>',90)])])}const h=n(i,[["render",s]]);export{g as __pageData,h as default};
