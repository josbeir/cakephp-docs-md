import{_ as t,c as a,o as r,ag as d}from"./chunks/framework.DRADY2L-.js";const u=JSON.parse('{"title":"Backwards Compatibility Guide","description":"","frontmatter":{},"headers":[],"relativePath":"en/contributing/backwards-compatibility.md","filePath":"en/contributing/backwards-compatibility.md","lastUpdated":null}'),i={name:"en/contributing/backwards-compatibility.md"};function s(n,e,o,l,p,h){return r(),a("div",null,[...e[0]||(e[0]=[d(`<h1 id="backwards-compatibility-guide" tabindex="-1">Backwards Compatibility Guide <a class="header-anchor" href="#backwards-compatibility-guide" aria-label="Permalink to &quot;Backwards Compatibility Guide&quot;">​</a></h1><p>Ensuring that you can upgrade your applications easily and smoothly is important to us. That&#39;s why we only break compatibility at major release milestones. You might be familiar with <a href="https://semver.org/" target="_blank" rel="noreferrer">semantic versioning</a>, which is the general guideline we use on all CakePHP projects. In short, semantic versioning means that only major releases (such as 2.0, 3.0, 4.0) can break backwards compatibility. Minor releases (such as 2.1, 3.1, 3.2) may introduce new features, but are not allowed to break compatibility. Bug fix releases (such as 2.1.2, 3.0.1) do not add new features, but fix bugs or enhance performance only.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>Deprecations are removed with the next major version of the framework. It is advised that you adapt to deprecations as they are introduced to ensure future upgrades are easier.</p></div><p>To clarify what changes you can expect in each release tier we have more detailed information for developers using CakePHP, and for developers working on CakePHP that helps set expectations of what can be done in minor releases. Major releases can have as many breaking changes as required.</p><h2 id="migration-guides" tabindex="-1">Migration Guides <a class="header-anchor" href="#migration-guides" aria-label="Permalink to &quot;Migration Guides&quot;">​</a></h2><p>For each major and minor release, the CakePHP team will provide a migration guide. These guides explain the new features and any breaking changes that are in each release. They can be found in the <a href="/en/appendices.html">appendices</a> section of the cookbook.</p><h2 id="using-cakephp" tabindex="-1">Using CakePHP <a class="header-anchor" href="#using-cakephp" aria-label="Permalink to &quot;Using CakePHP&quot;">​</a></h2><p>If you are building your application with CakePHP, the following guidelines explain the stability you can expect.</p><h3 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h3><p>Outside of major releases, interfaces provided by CakePHP will <strong>not</strong> have any existing methods changed. New methods may be added, but no existing methods will be changed.</p><h3 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h3><p>Classes provided by CakePHP can be constructed and have their public methods and properties used by application code and outside of major releases backwards compatibility is ensured.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>Some classes in CakePHP are marked with the <code>@internal</code> API doc tag. These classes are <strong>not</strong> stable and do not have any backwards compatibility promises.</p></div><p>In minor releases, new methods may be added to classes, and existing methods may have new arguments added. Any new arguments will have default values, but if you&#39;ve overridden methods with a differing signature you may see fatal errors. Methods that have new arguments added will be documented in the migration guide for that release.</p><p>The following table outlines several use cases and what compatibility you can expect from CakePHP:</p><table tabindex="0"><thead><tr><th>If you...</th><th>Backwards compatibility?</th></tr></thead><tbody><tr><td>Typehint against the class</td><td>Yes</td></tr><tr><td>Create a new instance</td><td>Yes</td></tr><tr><td>Extend the class</td><td>Yes</td></tr><tr><td>Access a public property</td><td>Yes</td></tr><tr><td>Call a public method</td><td>Yes</td></tr><tr><td><strong>Extend a class and...</strong></td><td></td></tr><tr><td>Override a public property</td><td>Yes</td></tr><tr><td>Access a protected property</td><td>No [1]_</td></tr><tr><td>Override a protected property</td><td>No [1]_</td></tr><tr><td>Override a protected method</td><td>No [1]_</td></tr><tr><td>Call a protected method</td><td>No [1]_</td></tr><tr><td>Add a public property</td><td>No</td></tr><tr><td>Add a public method</td><td>No</td></tr><tr><td>Add an argument</td><td>No [1]_</td></tr><tr><td>to an overridden method</td><td></td></tr><tr><td>Add a default argument value</td><td>Yes</td></tr><tr><td>to an existing method</td><td></td></tr><tr><td>argument</td><td></td></tr></tbody></table><h2 id="working-on-cakephp" tabindex="-1">Working on CakePHP <a class="header-anchor" href="#working-on-cakephp" aria-label="Permalink to &quot;Working on CakePHP&quot;">​</a></h2><p>If you are helping make CakePHP even better please keep the following guidelines in mind when adding/changing functionality:</p><p>In a minor release you can:</p><table tabindex="0"><thead><tr><th>In a minor release can you...</th><th></th></tr></thead><tbody><tr><td><strong>Classes</strong></td><td></td></tr><tr><td>Remove a class</td><td>No</td></tr><tr><td>Remove an interface</td><td>No</td></tr><tr><td>Remove a trait</td><td>No</td></tr><tr><td>Make final</td><td>No</td></tr><tr><td>Make abstract</td><td>No</td></tr><tr><td>Change name</td><td>Yes [2]_</td></tr><tr><td><strong>Properties</strong></td><td></td></tr><tr><td>Add a public property</td><td>Yes</td></tr><tr><td>Remove a public property</td><td>No</td></tr><tr><td>Add a protected property</td><td>Yes</td></tr><tr><td>Remove a protected property</td><td>Yes [3]_</td></tr><tr><td><strong>Methods</strong></td><td></td></tr><tr><td>Add a public method</td><td>Yes</td></tr><tr><td>Remove a public method</td><td>No</td></tr><tr><td>Add a protected method</td><td>Yes</td></tr><tr><td>Move to parent class</td><td>Yes</td></tr><tr><td>Remove a protected method</td><td>Yes [3]_</td></tr><tr><td>Reduce visibility</td><td>No</td></tr><tr><td>Change method name</td><td>Yes [2]_</td></tr><tr><td>Add a new argument with</td><td>Yes</td></tr><tr><td>default value</td><td></td></tr><tr><td>Add a new required argument</td><td>No</td></tr><tr><td>to an existing method.</td><td></td></tr><tr><td>Remove a default value from</td><td>No</td></tr><tr><td>an existing argument</td><td></td></tr><tr><td>Change method type void</td><td>Yes</td></tr></tbody></table><p>.. [1] Your code <em>may</em> be broken by minor releases. Check the migration guide for details. .. [2] You can change a class/method name as long as the old name remains available. This is generally avoided unless renaming has significant benefit. .. [3] Avoid whenever possible. Any removals need to be documented in the migration guide.</p><h2 id="deprecations" tabindex="-1">Deprecations <a class="header-anchor" href="#deprecations" aria-label="Permalink to &quot;Deprecations&quot;">​</a></h2><p>In each minor release, features may be deprecated. If features are deprecated, API documentation and runtime warnings will be added. Runtime errors help you locate code that needs to be updated before it breaks. If you wish to disable runtime warnings you can do so using the <code>Error.errorLevel</code> configuration value</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// in config/app.php</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Error&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;errorLevel&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> E_ALL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> E_USER_DEPRECATED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Will disable runtime deprecation warnings. <a id="experimental-features"></a></p><h2 id="experimental-features" tabindex="-1">Experimental Features <a class="header-anchor" href="#experimental-features" aria-label="Permalink to &quot;Experimental Features&quot;">​</a></h2><p>Experimental features are <strong>not included</strong> in the above backwards compatibility promises. Experimental features can have breaking changes made in minor releases as long as they remain experimental. Experimental features can be identified by the warning in the book and the usage of <code>@experimental</code> in the API documentation.</p><p>Experimental features are intended to help gather feedback on how a feature works before it becomes stable. Once the interfaces and behavior has been vetted with the community the experimental flags will be removed.</p>`,28)])])}const m=t(i,[["render",s]]);export{u as __pageData,m as default};
