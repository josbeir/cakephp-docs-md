import{_ as a,c as i,o,ag as n}from"./chunks/framework.DRADY2L-.js";const u=JSON.parse('{"title":"Deployment","description":"","frontmatter":{"title":"Deployment","keywords":"stack traces,application extensions,set document,installation documentation,development features,generic error,document root,func,debug,caches,error messages,configuration files,webroot,deployment,cakephp,applications"},"headers":[],"relativePath":"en/deployment.md","filePath":"en/deployment.md","lastUpdated":null}'),s={name:"en/deployment.md"};function t(r,e,l,d,p,c){return o(),i("div",null,[...e[0]||(e[0]=[n(`<h1 id="deployment" tabindex="-1">Deployment <a class="header-anchor" href="#deployment" aria-label="Permalink to &quot;Deployment&quot;">​</a></h1><p>Once your app is ready to be deployed there are a few things you should do.</p><h2 id="moving-files" tabindex="-1">Moving files <a class="header-anchor" href="#moving-files" aria-label="Permalink to &quot;Moving files&quot;">​</a></h2><p>You can clone your repository onto your production server and then checkout the commit/tag you want to run. Then, run <code>composer install</code>. While this requires some knowledge about git and an existing install of <code>git</code> and <code>composer</code> this process will take care about library dependencies and file and folder permissions.</p><p>Be aware that when deploying via FTP you will have to fix file and folder permissions.</p><p>You can also use this deployment technique to setup a staging or demo-server (pre-production) and keep it in sync with your local environment.</p><h2 id="adjusting-configuration" tabindex="-1">Adjusting Configuration <a class="header-anchor" href="#adjusting-configuration" aria-label="Permalink to &quot;Adjusting Configuration&quot;">​</a></h2><p>You&#39;ll want to make a few adjustments to your application&#39;s configuration for a production environment. The value of <code>debug</code> is extremely important. Turning debug = <code>false</code> disables a number of development features that should never be exposed to the Internet at large. Disabling debug changes the following features:</p><ul><li>Debug messages, created with <code>pr()</code>, <code>debug()</code> and <code>dd()</code> are disabled.</li><li>Core CakePHP caches duration are defaulted to 365 days, instead of 10 seconds as in development.</li><li>Error views are less informative, and generic error pages are displayed instead of detailed error messages with stack traces.</li><li>PHP Warnings and Errors are not displayed.</li></ul><p>In addition to the above, many plugins and application extensions use <code>debug</code> to modify their behavior.</p><p>You can check against an environment variable to set the debug level dynamically between environments. This will avoid deploying an application with debug <code>true</code> and also save yourself from having to change the debug level each time before deploying to a production environment.</p><p>For example, you can set an environment variable in your Apache configuration</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SetEnv CAKEPHP_DEBUG 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>And then you can set the debug level dynamically in <strong>app_local.php</strong>::</p><pre><code>$debug = (bool)getenv(&#39;CAKEPHP_DEBUG&#39;);

return [
    &#39;debug&#39; =&gt; $debug,
    .....
];
</code></pre><p>It is recommended that you put configuration that is shared across all of your application&#39;s environments in <strong>config/app.php</strong>. For configuration that varies between environments either use <strong>config/app_local.php</strong> or environment variables.</p><h2 id="check-your-security" tabindex="-1">Check Your Security <a class="header-anchor" href="#check-your-security" aria-label="Permalink to &quot;Check Your Security&quot;">​</a></h2><p>If you&#39;re throwing your application out into the wild, it&#39;s a good idea to make sure it doesn&#39;t have any obvious leaks:</p><ul><li>Ensure you are using the <a href="/en/security/csrf.html#csrf-middleware">csrf-middleware</a> component or middleware.</li><li>You may want to enable the <a href="/en/controllers/components/form-protection.html">controllers/components/form-protection</a> component. It can help prevent several types of form tampering and reduce the possibility of mass-assignment issues.</li><li>Ensure your models have the correct <a href="/en/core-libraries/validation.html">core-libraries/validation</a> rules enabled.</li><li>Check that only your <code>webroot</code> directory is publicly visible, and that your secrets (such as your app salt, and any security keys) are private and unique as well.</li></ul><h2 id="set-document-root" tabindex="-1">Set Document Root <a class="header-anchor" href="#set-document-root" aria-label="Permalink to &quot;Set Document Root&quot;">​</a></h2><p>Setting the document root correctly on your application is an important step to keeping your code secure and your application safer. CakePHP applications should have the document root set to the application&#39;s <code>webroot</code>. This makes the application and configuration files inaccessible through a URL. Setting the document root is different for different webservers. See the <a href="/en/installation.html#url-rewriting">url-rewriting</a> documentation for webserver specific information.</p><p>In all cases you will want to set the virtual host/domain&#39;s document to be <code>webroot/</code>. This removes the possibility of files outside of the webroot directory being executed. <a id="symlink-assets"></a></p><h2 id="improve-your-application-s-performance" tabindex="-1">Improve Your Application&#39;s Performance <a class="header-anchor" href="#improve-your-application-s-performance" aria-label="Permalink to &quot;Improve Your Application&#39;s Performance&quot;">​</a></h2><p>Class loading can take a big share of your application&#39;s processing time. In order to avoid this problem, it is recommended that you run this command in your production server once the application is deployed</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> composer.phar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dumpautoload</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Since handling static assets, such as images, JavaScript and CSS files of plugins, through the <code>Dispatcher</code> is incredibly inefficient, it is strongly recommended to symlink them for production. This can be done by using the <code>plugin</code> command</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/cake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assets</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> symlink</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The above command will symlink the <code>webroot</code> directory of all loaded plugins to appropriate path in the app&#39;s <code>webroot</code> directory.</p><p>If your filesystem doesn&#39;t allow creating symlinks the directories will be copied instead of being symlinked. You can also explicitly copy the directories using</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/cake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assets</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>CakePHP uses <code>assert()</code> internally to provide runtime type checking and provide better error messages during development. You can have PHP skip these assertions by updating your <code>php.ini</code> to include:</p><div class="language-ini vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; Turn off assert() code generation.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">zend.assertions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = -1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Skipping code generation for <code>assert()</code> will yield faster runtime performance, and is recommended for applications that have good test coverage or that are using a static analyzer.</p><h2 id="deploying-an-update" tabindex="-1">Deploying an update <a class="header-anchor" href="#deploying-an-update" aria-label="Permalink to &quot;Deploying an update&quot;">​</a></h2><p>On each deploy you&#39;ll likely have a few tasks to co-ordinate on your web server. Some typical ones are:</p><ol><li>Install dependencies with <code>composer install</code>. Avoid using <code>composer update</code> when doing deploys as you could get unexpected versions of packages.</li><li>Run database <a href="/en/migrations.html">migrations</a> with either the Migrations plugin or another tool.</li><li>Clear model schema cache with <code>bin/cake schema_cache clear</code>. The <a href="/en/console-commands/schema-cache.html">console-commands/schema-cache</a> has more information on this command.</li></ol>`,36)])])}const m=a(s,[["render",t]]);export{u as __pageData,m as default};
