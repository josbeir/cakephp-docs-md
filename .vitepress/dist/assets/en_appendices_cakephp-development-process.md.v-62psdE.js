import{_ as a,c as r,o as t,ag as s}from"./chunks/framework.DRADY2L-.js";const m=JSON.parse('{"title":"CakePHP Development Process","description":"","frontmatter":{"title":"CakePHP Development Process","keywords":"maintenance branch,community interaction,community feature,necessary feature,stable release,ticket system,advanced feature,power users,feature set,chat irc,leading edge,router,new features,members,attempt,development branches,branch development"},"headers":[],"relativePath":"en/appendices/cakephp-development-process.md","filePath":"en/appendices/cakephp-development-process.md","lastUpdated":null}'),o={name:"en/appendices/cakephp-development-process.md"};function n(i,e,l,c,d,h){return t(),r("div",null,[...e[0]||(e[0]=[s('<h1 id="cakephp-development-process" tabindex="-1">CakePHP Development Process <a class="header-anchor" href="#cakephp-development-process" aria-label="Permalink to &quot;CakePHP Development Process&quot;">​</a></h1><p>CakePHP projects broadly follow <a href="https://semver.org/" target="_blank" rel="noreferrer">semver</a>. This means that:</p><ul><li>Releases are numbered in the form of <strong>A.B.C</strong></li><li><strong>A</strong> releases are <em>major releases</em>. They contain breaking changes and will require non-trivial amounts of work to upgrade to from a lower <strong>A</strong> release.</li><li><strong>A.B</strong> releases are <em>feature releases</em>. Each version will be backwards compatible but may introduce new deprecations. If a breaking change is absolutely required it will be noted in the migration guide for that release.</li><li><strong>A.B.C</strong> releases are <em>patch</em> releases. They should be backwards compatible with the previous patch release. The exception to this rule is if a security issue is discovered and the only solution is to break an existing API.</li></ul><p>See the <a href="/en/contributing/backwards-compatibility.html">contributing/backwards-compatibility</a> for what we consider to be backwards compatible and a breaking changes.</p><h2 id="major-releases" tabindex="-1">Major Releases <a class="header-anchor" href="#major-releases" aria-label="Permalink to &quot;Major Releases&quot;">​</a></h2><p>Major releases introduce new features and can remove functionality deprecated in an earlier release. These releases live in <code>next</code> branches that match their version number such as <code>5.next</code>. Once released they are promoted into <code>master</code> and then <code>5.next</code> branch is used for future feature releases.</p><h2 id="feature-releases" tabindex="-1">Feature Releases <a class="header-anchor" href="#feature-releases" aria-label="Permalink to &quot;Feature Releases&quot;">​</a></h2><p>Feature releases are where new features or extensions to existing features are shipped. Each release series receiving updates will have a <code>next</code> branch. For example <code>4.next</code>. If you would like to contribute a new feature please target these branches.</p><h2 id="patch-releases" tabindex="-1">Patch Releases <a class="header-anchor" href="#patch-releases" aria-label="Permalink to &quot;Patch Releases&quot;">​</a></h2><p>Patch releases fix bugs in existing code/documentation and should always be compatible with earlier patch releases from the same feature release. These releases are created from the stable branches. Stable branches are often named after the release series such as <code>3.x</code>.</p><h2 id="release-cadence" tabindex="-1">Release Cadence <a class="header-anchor" href="#release-cadence" aria-label="Permalink to &quot;Release Cadence&quot;">​</a></h2><ul><li><em>Major Releases</em> are delivered approximately every two to three years. This timeframe forces us to be deliberate and considerate with our breaking changes and gives time for the community to keep up without feeling like they are being left behind.</li><li><em>Feature Releases</em> are delivered every five to eight months.</li><li><em>Patch Releases</em> Are initially delivered every two weeks. As a feature release matures this cadence relaxes to a monthly schedule.</li></ul><h2 id="deprecation-policy" tabindex="-1">Deprecation Policy <a class="header-anchor" href="#deprecation-policy" aria-label="Permalink to &quot;Deprecation Policy&quot;">​</a></h2><p>Before a feature can be removed in a major release it needs to be deprecated. When a behavior is deprecated in release <strong>A.x</strong> it will continue to work for remainder of all <strong>A.x</strong> releases. Deprecations are generally indicated via PHP warnings. You can enable deprecation warnings by adding <code>E_USER_DEPRECATED</code> to your application&#39;s <code>Error.level</code> value.</p><p>Once deprecated behavior is not removed until the next major release. For example behavior deprecated in <code>4.1</code> will be removed in <code>5.0</code>.</p>',15)])])}const u=a(o,[["render",n]]);export{m as __pageData,u as default};
