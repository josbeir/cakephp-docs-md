import{_ as s,c as a,o as i,ag as t}from"./chunks/framework.DRADY2L-.js";const k=JSON.parse('{"title":"I18N command","description":"","frontmatter":{"title":"I18N command","keywords":"pot files,locale default,translation tools,message string,app locale,php class,validation,i18n,translations,command,models"},"headers":[],"relativePath":"en/console-commands/i18n.md","filePath":"en/console-commands/i18n.md","lastUpdated":null}'),n={name:"en/console-commands/i18n.md"};function l(r,e,o,p,h,d){return i(),a("div",null,[...e[0]||(e[0]=[t(`<h1 id="i18n-tool" tabindex="-1">I18N Tool <a class="header-anchor" href="#i18n-tool" aria-label="Permalink to &quot;I18N Tool&quot;">​</a></h1><p>The i18n features of CakePHP use <a href="https://en.wikipedia.org/wiki/GNU_gettext" target="_blank" rel="noreferrer">po files</a> as their translation source. PO files integrate with commonly used translation tools like <a href="https://www.poedit.net/" target="_blank" rel="noreferrer">Poedit</a>.</p><p>The i18n commands provides a quick way to generate po template files. These templates files can then be given to translators so they can translate the strings in your application. Once you have translations done, pot files can be merged with existing translations to help update your translations.</p><h2 id="generating-pot-files" tabindex="-1">Generating POT Files <a class="header-anchor" href="#generating-pot-files" aria-label="Permalink to &quot;Generating POT Files&quot;">​</a></h2><p>POT files can be generated for an existing application using the <code>extract</code> command. This command will scan your entire application for <code>__()</code> style function calls, and extract the message string. Each unique string in your application will be combined into a single POT file:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/cake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i18n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> extract</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The above will run the extraction command. The result of this command will be the file <strong>resources/locales/default.pot</strong>. You use the pot file as a template for creating po files. If you are manually creating po files from the pot file, be sure to correctly set the <code>Plural-Forms</code> header line.</p><h3 id="generating-pot-files-for-plugins" tabindex="-1">Generating POT Files for Plugins <a class="header-anchor" href="#generating-pot-files-for-plugins" aria-label="Permalink to &quot;Generating POT Files for Plugins&quot;">​</a></h3><p>You can generate a POT file for a specific plugin using:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/cake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i18n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> extract</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --plugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Plugi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>This will generate the required POT files used in the plugins.</p><h3 id="extracting-from-multiple-folders-at-once" tabindex="-1">Extracting from multiple folders at once <a class="header-anchor" href="#extracting-from-multiple-folders-at-once" aria-label="Permalink to &quot;Extracting from multiple folders at once&quot;">​</a></h3><p>Sometimes, you might need to extract strings from more than one directory of your application. For instance, if you are defining some strings in the <code>config</code> directory of your application, you probably want to extract strings from this directory as well as from the <code>src</code> directory. You can do it by using the <code>--paths</code> option. It takes a comma-separated list of absolute paths to extract:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/cake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i18n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> extract</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --paths</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/www/app/config,/var/www/app/src</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="excluding-folders" tabindex="-1">Excluding Folders <a class="header-anchor" href="#excluding-folders" aria-label="Permalink to &quot;Excluding Folders&quot;">​</a></h3><p>You can pass a comma separated list of folders that you wish to be excluded. Any path containing a path segment with the provided values will be ignored:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/cake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i18n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> extract</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --exclude</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vendor,tests</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="skipping-overwrite-warnings-for-existing-pot-files" tabindex="-1">Skipping Overwrite Warnings for Existing POT Files <a class="header-anchor" href="#skipping-overwrite-warnings-for-existing-pot-files" aria-label="Permalink to &quot;Skipping Overwrite Warnings for Existing POT Files&quot;">​</a></h3><p>By adding <code>--overwrite</code>, the shell script will no longer warn you if a POT file already exists and will overwrite by default:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/cake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i18n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> extract</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --overwrite</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="extracting-messages-from-the-cakephp-core-libraries" tabindex="-1">Extracting Messages from the CakePHP Core Libraries <a class="header-anchor" href="#extracting-messages-from-the-cakephp-core-libraries" aria-label="Permalink to &quot;Extracting Messages from the CakePHP Core Libraries&quot;">​</a></h3><p>By default, the extract shell script will ask you if you like to extract the messages used in the CakePHP core libraries. Set <code>--extract-core</code> to yes or no to set the default behavior:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/cake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i18n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> extract</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --extract-core</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin/cake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i18n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> extract</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --extract-core</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> no</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,23)])])}const g=s(n,[["render",l]]);export{k as __pageData,g as default};
