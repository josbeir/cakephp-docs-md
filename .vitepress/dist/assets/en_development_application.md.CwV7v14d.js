import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.DRADY2L-.js";const k=JSON.parse('{"title":"CakePHP Application","description":"","frontmatter":{"title":"CakePHP Application","keywords":"http, middleware, psr-7, events, plugins, application, baseapplication,auto tables,auto-tables,generic table,class"},"headers":[],"relativePath":"en/development/application.md","filePath":"en/development/application.md","lastUpdated":null}'),l={name:"en/development/application.md"};function t(p,s,o,r,h,c){return n(),i("div",null,[...s[0]||(s[0]=[e(`<h1 id="application" tabindex="-1">Application <a class="header-anchor" href="#application" aria-label="Permalink to &quot;Application&quot;">​</a></h1><p>The <code>Application</code> is the heart of your application. It controls how your application is configured, and what plugins, middleware, console commands and routes are included.</p><p>You can find your <code>Application</code> class at <strong>src/Application.php</strong>. By default it will be pretty slim and only define a few default [/controllers/middleware\`. Applications can define the following hook methods:</p><ul><li><code>bootstrap</code> Used to load <a href="/en/development/configuration.html">configuration files</a>, define constants and other global functions. By default this will include <strong>config/bootstrap.php</strong>. This is the ideal place to load [/plugins](/en/configuration files](/en/development/configuration.md), define constants and other global functions. By default this will include <strong>config/bootstrap.php</strong>. This is the ideal place to load [/plugins.md) and global <a href="/en/core-libraries/events.html">event listeners</a>. *](/en/event listeners](/en/core-libraries/events.md). *.md)<code>routes</code> Used to load <a href="/en/development/routing.html">routes</a>. By default this will include <strong>config/routes.php</strong>.</li><li><code>middleware</code> Used to add <a href="/en/controllers/middleware.html">middleware</a> to your application.</li><li><code>console</code> Used to add <a href="/en/console-commands.html">console commands</a> to your application. By default this will automatically discover console commands in your application and all plugins.</li></ul><h2 id="bootstrapping-your-application" tabindex="-1">Bootstrapping your Application <a class="header-anchor" href="#bootstrapping-your-application" aria-label="Permalink to &quot;Bootstrapping your Application&quot;">​</a></h2><p>If you have any additional configuration needs, you should add them to your application&#39;s <strong>config/bootstrap.php</strong> file. This file is included before each request, and CLI command.</p><p>This file is ideal for a number of common bootstrapping tasks:</p><ul><li>Defining convenience functions.</li><li>Declaring constants.</li><li>Defining cache configuration.</li><li>Defining logging configuration.</li><li>Loading custom inflections.</li><li>Loading configuration files.</li></ul><p>It might be tempting to place formatting functions there in order to use them in your controllers. As you&#39;ll see in the <a href="/en/controllers.html">controllers</a> and <a href="/en/views.html">views</a> sections there are better ways you add custom logic to your application. <a id="application-bootstrap"></a></p><h3 id="application-bootstrap" tabindex="-1">Application::bootstrap() <a class="header-anchor" href="#application-bootstrap" aria-label="Permalink to &quot;Application::bootstrap()&quot;">​</a></h3><p>In addition to the <strong>config/bootstrap.php</strong> file which should be used to configure low-level concerns of your application, you can also use the \`Application::bootstrap()\`\` hook method to load/initialize plugins, and attach global event listeners</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// in src/Application.php</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Cake\\Http\\BaseApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BaseApplication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bootstrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Call the parent to \`require_once\` config/bootstrap.php</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        parent::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bootstrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // CakePHP has the ability to fallback to using the \`Cake\\ORM\\Table\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // class to represent your database tables when a related class is</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // not created for that table. But using this &quot;auto-tables&quot; feature</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // can make debugging more difficult in some scenarios. So we disable</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // this feature except for the CLI environment (since the classes</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // would not be present when using the \`bake\` code generation tool).</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PHP_SAPI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cli&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            FactoryLocator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &#39;Table&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> TableLocator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allowFallbackClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Load MyPlugin</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        $this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyPlugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>Loading plugins and events in <code>Application::bootstrap()</code> makes <a href="/en/development/testing.html#integration-testing">integration-testing</a> easier as events and routes will be re-processed on each test method.</p>`,13)])])}const g=a(l,[["render",t]]);export{k as __pageData,g as default};
