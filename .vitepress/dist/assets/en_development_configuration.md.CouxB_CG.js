import{_ as s,c as a,o as e,ag as n}from"./chunks/framework.DRADY2L-.js";const c=JSON.parse('{"title":"Configuration","description":"","frontmatter":{"title":"Configuration","keywords":"finished configuration,legacy database,database configuration,value pairs,default connection,optional configuration,example database,php class,configuration database,default database,configuration steps,index database,configuration details,class database,host localhost,inflections,key value,database connection,piece of cake,basic web"},"headers":[],"relativePath":"en/development/configuration.md","filePath":"en/development/configuration.md","lastUpdated":null}'),t={name:"en/development/configuration.md"};function l(o,i,r,p,h,d){return e(),a("div",null,[...i[0]||(i[0]=[n(`<h1 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h1><p>While conventions remove the need to configure all of CakePHP, you&#39;ll still need to configure a few things like your database credentials.</p><p>Additionally, there are optional configuration options that allow you to swap out default values &amp; implementations with ones tailored to your application.</p><p>.. index:: app.php, app_local.example.php</p><p>.. index:: configuration</p><h2 id="configuring-your-application" tabindex="-1">Configuring your Application <a class="header-anchor" href="#configuring-your-application" aria-label="Permalink to &quot;Configuring your Application&quot;">​</a></h2><p>Configuration is generally stored in either PHP or INI files, and loaded during the application bootstrap. CakePHP comes with one configuration file by default, but if required you can add additional configuration files and load them in your application&#39;s bootstrap code. <code>Cake\\Core\\Configure</code> is used for global configuration, and classes like <code>Cache</code> provide <code>setConfig()</code> methods to make configuration simple and transparent.</p><p>The application skeleton features a <strong>config/app.php</strong> file which should contain configuration that doesn&#39;t vary across the various environments your application is deployed in. The <strong>config/app_local.php</strong> file should contain the configuration data that varies between environments and should be managed by configuration management, or your deployment tooling. Both of these files reference environment variables through the <code>env()</code> function that enables configuration values to set through the server environment.</p><h3 id="loading-additional-configuration-files" tabindex="-1">Loading Additional Configuration Files <a class="header-anchor" href="#loading-additional-configuration-files" aria-label="Permalink to &quot;Loading Additional Configuration Files&quot;">​</a></h3><p>If your application has many configuration options it can be helpful to split configuration into multiple files. After creating each of the files in your <strong>config/</strong> directory you can load them in <strong>bootstrap.php</strong></p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Cake\\Core\\Configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Cake\\Core\\Configure\\Engine\\PhpConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PhpConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;other_config&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><a id="environment-variables"></a></p><h2 id="environment-variables" tabindex="-1">Environment Variables <a class="header-anchor" href="#environment-variables" aria-label="Permalink to &quot;Environment Variables&quot;">​</a></h2><p>Many modern cloud providers, like Heroku, let you define environment variables for configuration data. You can configure your CakePHP through environment variables in the <a href="https://12factor.net/" target="_blank" rel="noreferrer">12factor app style</a>. Environment variables allow your application to require less state making your application easier to manage when it is deployed across a number of environments.</p><p>As you can see in your <strong>app.php</strong>, the <code>env()</code> function is used to read configuration from the environment, and build the application configuration. CakePHP uses :term:<code>DSN</code> strings for databases, logs, email transports and cache configurations allowing you to easily vary these libraries in each environment.</p><p>For local development, CakePHP leverages <a href="https://github.com/josegonzalez/php-dotenv" target="_blank" rel="noreferrer">dotenv</a> to make local development automatically reload environment variables. Use composer to require this library and then there is a block of code in <code>bootstrap.php</code> that needs to be uncommented to harness it.</p><p>You will see a <code>config/.env.example</code> in your application. By copying this file into <code>config/.env</code> and customizing the values you can configure your application.</p><p>You should avoid committing the <code>config/.env</code> file to your repository and instead use the <code>config/.env.example</code> as a template with placeholder values so everyone on your team knows what environment variables are in use and what should go in each one.</p><p>Once your environment variables have been set, you can use <code>env()</code> to read data from the environment</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$debug </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;APP_DEBUG&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The second value passed to the env function is the default value. This value will be used if no environment variable exists for the given key. <a id="general-configuration"></a></p><h3 id="general-configuration" tabindex="-1">General Configuration <a class="header-anchor" href="#general-configuration" aria-label="Permalink to &quot;General Configuration&quot;">​</a></h3><p>Below is a description of the variables and how they affect your CakePHP application.</p><p>debug Changes CakePHP debugging output. <code>false</code> = Production mode. No error messages, errors, or warnings shown. <code>true</code> = Errors and warnings shown. App.namespace The namespace to find app classes under.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>When changing the namespace in your configuration, you will also need to update your <strong>composer.json</strong> file to use this namespace as well. Additionally, create a new autoloader by running <code>php composer.phar dumpautoload</code>. <a id="core-configuration-baseurl"></a> App.baseUrl Un-comment this definition if you <strong>don’t</strong> plan to use Apache’s mod_rewrite with CakePHP. Don’t forget to remove your .htaccess files too. App.base The base directory the app resides in. If <code>false</code> this will be auto detected. If not <code>false</code>, ensure your string starts with a <code>/</code> and does NOT end with a <code>/</code>. For example, <code>/basedir</code> is a valid App.base. App.encoding Define what encoding your application uses. This encoding is used to generate the charset in the layout, and encode entities. It should match the encoding values specified for your database. App.webroot The webroot directory. App.wwwRoot The file path to webroot. App.fullBaseUrl The fully qualified domain name (including protocol) to your application&#39;s root. This is used when generating absolute URLs. By default this value is generated using the <code>$_SERVER</code> environment. However, you should define it manually to optimize performance or if you are concerned about people manipulating the <code>Host</code> header. In a CLI context (from command) the <code>fullBaseUrl</code> cannot be read from $_SERVER, as there is no webserver involved. You do need to specify it yourself if you do need to generate URLs from a shell (for example, when sending emails). App.imageBaseUrl Web path to the public images directory under webroot. If you are using a :term:<code>CDN</code> you should set this value to the CDN&#39;s location. App.cssBaseUrl Web path to the public css directory under webroot. If you are using a :term:<code>CDN</code> you should set this value to the CDN&#39;s location. App.jsBaseUrl Web path to the public js directory under webroot. If you are using a :term:<code>CDN</code> you should set this value to the CDN&#39;s location. App.paths Configure paths for non class based resources. Supports the <code>plugins</code>, <code>templates</code>, <code>locales</code> subkeys, which allow the definition of paths for plugins, view templates and locale files respectively. App.uploadedFilesAsObjects Defines whether uploaded files are being represented as objects (<code>true</code>), or arrays (<code>false</code>). This option is being treated as enabled by default. See the <a href="/en/controllers/request-response.html#request-file-uploads">File Uploads section</a> in the Request &amp; Response Objects chapter for more information. Security.salt A random string used in hashing. This value is also used as the HMAC salt when doing symmetric encryption. Asset.timestamp Appends a timestamp which is last modified time of the particular file at the end of asset files URLs (CSS, JavaScript, Image) when using proper helpers. Valid values:</p></div><ul><li>(bool) <code>false</code> - Doesn&#39;t do anything (default)</li><li>(bool) <code>true</code> - Appends the timestamp when debug is <code>true</code></li><li>(string) &#39;force&#39; - Always appends the timestamp. Asset.cacheTime Sets the asset cache time. This determines the http header <code>Cache-Control</code>&#39;s <code>max-age</code>, and the http header&#39;s <code>Expire</code>&#39;s time for assets. This can take anything that you version of PHP&#39;s <a href="https://php.net/manual/en/function.strtotime.php" target="_blank" rel="noreferrer">strtotime function</a> can take. The default is <code>+1 day</code>.</li></ul><h3 id="using-a-cdn" tabindex="-1">Using a CDN <a class="header-anchor" href="#using-a-cdn" aria-label="Permalink to &quot;Using a CDN&quot;">​</a></h3><p>To use a CDN for loading your static assets, change <code>App.imageBaseUrl</code>, <code>App.cssBaseUrl</code>, <code>App.jsBaseUrl</code> to point the CDN URI, for example: <code>https://mycdn.example.com/</code> (note the trailing <code>/</code>).</p><p>All images, scripts and styles loaded via HtmlHelper will prepend the absolute CDN path, matching the same relative path used in the application. Please note there is a specific use case when using plugin based assets: plugins will not use the plugin&#39;s prefix when absolute <code>...BaseUrl</code> URI is used, for example By default:</p><ul><li><code>$this-&gt;Helper-&gt;assetUrl(&#39;TestPlugin.logo.png&#39;)</code> resolves to <code>test_plugin/logo.png</code></li></ul><p>If you set <code>App.imageBaseUrl</code> to \`\`<a href="https://mycdn.example.com/%60:" target="_blank" rel="noreferrer">https://mycdn.example.com/\`:</a></p><ul><li><code>$this-&gt;Helper-&gt;assetUrl(&#39;TestPlugin.logo.png&#39;)</code> resolves to <code>https://mycdn.example.com/logo.png</code>.</li></ul><h3 id="database-configuration" tabindex="-1">Database Configuration <a class="header-anchor" href="#database-configuration" aria-label="Permalink to &quot;Database Configuration&quot;">​</a></h3><p>See the <a href="/en/orm/database-basics.html#database-configuration">Database Configuration</a> for information on configuring your database connections.</p><h3 id="caching-configuration" tabindex="-1">Caching Configuration <a class="header-anchor" href="#caching-configuration" aria-label="Permalink to &quot;Caching Configuration&quot;">​</a></h3><p>See the <a href="/en/core-libraries/caching.html#cache-configuration">Caching Configuration</a> for information on configuring caching in CakePHP.</p><h3 id="error-and-exception-handling-configuration" tabindex="-1">Error and Exception Handling Configuration <a class="header-anchor" href="#error-and-exception-handling-configuration" aria-label="Permalink to &quot;Error and Exception Handling Configuration&quot;">​</a></h3><p>See the <a href="/en/development/errors.html#error-configuration">Error and Exception Configuration</a> for information on configuring error and exception handlers.</p><h3 id="logging-configuration" tabindex="-1">Logging Configuration <a class="header-anchor" href="#logging-configuration" aria-label="Permalink to &quot;Logging Configuration&quot;">​</a></h3><p>See the <a href="/en/core-libraries/logging.html#log-configuration">log-configuration</a> for information on configuring logging in CakePHP.</p><h3 id="email-configuration" tabindex="-1">Email Configuration <a class="header-anchor" href="#email-configuration" aria-label="Permalink to &quot;Email Configuration&quot;">​</a></h3><p>See the <a href="/en/core-libraries/email.html#email-configuration">Email Configuration</a> for information on configuring email presets in CakePHP.</p><h3 id="session-configuration" tabindex="-1">Session Configuration <a class="header-anchor" href="#session-configuration" aria-label="Permalink to &quot;Session Configuration&quot;">​</a></h3><p>See the <a href="/en/development/sessions.html#session-configuration">session-configuration</a> for information on configuring session handling in CakePHP.</p><h3 id="routing-configuration" tabindex="-1">Routing configuration <a class="header-anchor" href="#routing-configuration" aria-label="Permalink to &quot;Routing configuration&quot;">​</a></h3><p>See the <a href="/en/development/routing.html#routes-configuration">Routes Configuration</a> for more information on configuring routing and creating routes for your application. <a id="additional-class-paths"></a></p><h2 id="additional-class-paths" tabindex="-1">Additional Class Paths <a class="header-anchor" href="#additional-class-paths" aria-label="Permalink to &quot;Additional Class Paths&quot;">​</a></h2><p>Additional class paths are setup through the autoloaders your application uses. When using \`composer\`\` to generate your autoloader, you could do the following, to provide fallback paths for controllers in your application</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;autoload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;psr-4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;App\\\\Controller\\\\&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/directory/with/controller/folders/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;App\\\\&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>The above would setup paths for both the <code>App</code> and <code>App\\Controller</code> namespace. The first key will be searched, and if that path does not contain the class/file the second key will be searched. You can also map a single namespace to multiple directories with the following</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;autoload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;psr-4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;App</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/directory/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="plugin-view-template-and-locale-paths" tabindex="-1">Plugin, View Template and Locale Paths <a class="header-anchor" href="#plugin-view-template-and-locale-paths" aria-label="Permalink to &quot;Plugin, View Template and Locale Paths&quot;">​</a></h3><p>Since plugins, view templates and locales are not classes, they cannot have an autoloader configured. CakePHP provides three Configure variables to setup additional paths for these resources. In your <strong>config/app.php</strong> you can set these variables</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // More configuration</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;App&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;paths&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &#39;plugins&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                ROOT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;plugins&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &#39;/path/to/other/plugins/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &#39;templates&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                ROOT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;templates&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                ROOT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;templates2&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &#39;locales&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                ROOT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;resources&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;locales&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>Paths should end with a directory separator, or they will not work properly.</p><h2 id="inflection-configuration" tabindex="-1">Inflection Configuration <a class="header-anchor" href="#inflection-configuration" aria-label="Permalink to &quot;Inflection Configuration&quot;">​</a></h2><p>See the <a href="/en/core-libraries/inflector.html#inflection-configuration">inflection-configuration</a> docs for more information.</p><h2 id="configure-class" tabindex="-1">Configure Class <a class="header-anchor" href="#configure-class" aria-label="Permalink to &quot;Configure Class&quot;">​</a></h2><p><strong>Namespace:</strong> <code>Cake\\Core</code></p><h3 id="class-cake-core-configure" tabindex="-1">Class <code>Cake\\Core\\Configure</code> <a class="header-anchor" href="#class-cake-core-configure" aria-label="Permalink to &quot;Class \`Cake\\Core\\Configure\`&quot;">​</a></h3><p>CakePHP&#39;s Configure class can be used to store and retrieve application or runtime specific values. Be careful, this class allows you to store anything in it, then use it in any other part of your code: a sure temptation to break the MVC pattern CakePHP was designed for. The main goal of Configure class is to keep centralized variables that can be shared between many objects. Remember to try to live by &quot;convention over configuration&quot; and you won&#39;t end up breaking the MVC structure CakePHP provides.</p><h3 id="writing-configuration-data" tabindex="-1">Writing Configuration data <a class="header-anchor" href="#writing-configuration-data" aria-label="Permalink to &quot;Writing Configuration data&quot;">​</a></h3><h4 id="static-method-cake-core-configure-write-key-value" tabindex="-1">Static Method <code>Cake\\Core\\Configure::write($key, $value)</code> <a class="header-anchor" href="#static-method-cake-core-configure-write-key-value" aria-label="Permalink to &quot;Static Method \`Cake\\Core\\Configure::write($key, $value)\`&quot;">​</a></h4><p>Use <code>write()</code> to store data in the application&#39;s configuration</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Company.name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Pizza, Inc.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Company.slogan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Pizza for your body and soul&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The :term:<code>dot notation</code> used in the <code>$key</code> parameter can be used to organize your configuration settings into logical groups.</p></div><p>The above example could also be written in a single call</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Company&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;name&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Pizza, Inc.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;slogan&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Pizza for your body and soul&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>You can use <code>Configure::write(&#39;debug&#39;, $bool)</code> to switch between debug and production modes on the fly.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>Any configuration changes done using <code>Configure::write()</code> are in memory and will not persist across requests.</p></div><h3 id="reading-configuration-data" tabindex="-1">Reading Configuration Data <a class="header-anchor" href="#reading-configuration-data" aria-label="Permalink to &quot;Reading Configuration Data&quot;">​</a></h3><h4 id="static-method-cake-core-configure-read-key-null-default-null" tabindex="-1">Static Method <code>Cake\\Core\\Configure::read($key = null, $default = null)</code> <a class="header-anchor" href="#static-method-cake-core-configure-read-key-null-default-null" aria-label="Permalink to &quot;Static Method \`Cake\\Core\\Configure::read($key = null, $default = null)\`&quot;">​</a></h4><p>Used to read configuration data from the application. If a key is supplied, the data is returned. Using our examples from write() above, we can read that data back</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns &#39;Pizza Inc.&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Company.name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns &#39;Pizza for your body and soul&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Company.slogan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Company&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Pizza, Inc.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;slogan&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Pizza for your body and soul&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns &#39;fallback&#39; as Company.nope is undefined.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Company.nope&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fallback&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>If <code>$key</code> is left null, all values in Configure will be returned.</p><h4 id="static-method-cake-core-configure-readorfail-key" tabindex="-1">Static Method <code>Cake\\Core\\Configure::readOrFail($key)</code> <a class="header-anchor" href="#static-method-cake-core-configure-readorfail-key" aria-label="Permalink to &quot;Static Method \`Cake\\Core\\Configure::readOrFail($key)\`&quot;">​</a></h4><p>Reads configuration data just like <code>Cake\\Core\\Configure::read()</code> but expects to find a key/value pair. In case the requested pair does not exist, a <code>RuntimeException</code> will be thrown</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readOrFail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Company.name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Yields: &#39;Pizza, Inc.&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readOrFail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Company.geolocation&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Will throw an exception</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readOrFail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Company&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Yields:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Pizza, Inc.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;slogan&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Pizza for your body and soul&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="checking-to-see-if-configuration-data-is-defined" tabindex="-1">Checking to see if Configuration Data is Defined <a class="header-anchor" href="#checking-to-see-if-configuration-data-is-defined" aria-label="Permalink to &quot;Checking to see if Configuration Data is Defined&quot;">​</a></h3><h4 id="static-method-cake-core-configure-check-key" tabindex="-1">Static Method <code>Cake\\Core\\Configure::check($key)</code> <a class="header-anchor" href="#static-method-cake-core-configure-check-key" aria-label="Permalink to &quot;Static Method \`Cake\\Core\\Configure::check($key)\`&quot;">​</a></h4><p>Used to check if a key/path exists and has non-null value</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$exists </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Company.name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="deleting-configuration-data" tabindex="-1">Deleting Configuration Data <a class="header-anchor" href="#deleting-configuration-data" aria-label="Permalink to &quot;Deleting Configuration Data&quot;">​</a></h3><h4 id="static-method-cake-core-configure-delete-key" tabindex="-1">Static Method <code>Cake\\Core\\Configure::delete($key)</code> <a class="header-anchor" href="#static-method-cake-core-configure-delete-key" aria-label="Permalink to &quot;Static Method \`Cake\\Core\\Configure::delete($key)\`&quot;">​</a></h4><p>Used to delete information from the application&#39;s configuration</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Company.name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="reading-deleting-configuration-data" tabindex="-1">Reading &amp; Deleting Configuration Data <a class="header-anchor" href="#reading-deleting-configuration-data" aria-label="Permalink to &quot;Reading &amp; Deleting Configuration Data&quot;">​</a></h3><h4 id="static-method-cake-core-configure-consume-key" tabindex="-1">Static Method <code>Cake\\Core\\Configure::consume($key)</code> <a class="header-anchor" href="#static-method-cake-core-configure-consume-key" aria-label="Permalink to &quot;Static Method \`Cake\\Core\\Configure::consume($key)\`&quot;">​</a></h4><p>Read and delete a key from Configure. This is useful when you want to combine reading and deleting values in a single operation.</p><h4 id="static-method-cake-core-configure-consumeorfail-key" tabindex="-1">Static Method <code>Cake\\Core\\Configure::consumeOrFail($key)</code> <a class="header-anchor" href="#static-method-cake-core-configure-consumeorfail-key" aria-label="Permalink to &quot;Static Method \`Cake\\Core\\Configure::consumeOrFail($key)\`&quot;">​</a></h4><p>Consumes configuration data just like <code>Cake\\Core\\Configure::consume()</code> but expects to find a key/value pair. In case the requested pair does not exist, a <code>RuntimeException</code> will be thrown</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">consumeOrFail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Company.name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Yields: &#39;Pizza, Inc.&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">consumeOrFail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Company.geolocation&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Will throw an exception</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">consumeOrFail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Company&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Yields:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Pizza, Inc.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;slogan&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Pizza for your body and soul&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="reading-and-writing-configuration-files" tabindex="-1">Reading and writing configuration files <a class="header-anchor" href="#reading-and-writing-configuration-files" aria-label="Permalink to &quot;Reading and writing configuration files&quot;">​</a></h2><h4 id="static-method-cake-core-configure-setconfig-name-engine" tabindex="-1">Static Method <code>Cake\\Core\\Configure::setConfig($name, $engine)</code> <a class="header-anchor" href="#static-method-cake-core-configure-setconfig-name-engine" aria-label="Permalink to &quot;Static Method \`Cake\\Core\\Configure::setConfig($name, $engine)\`&quot;">​</a></h4><p>CakePHP comes with two built-in configuration file engines. <code>Cake\\Core\\Configure\\Engine\\PhpConfig</code> is able to read PHP config files, in the same format that Configure has historically read. <code>Cake\\Core\\Configure\\Engine\\IniConfig</code> is able to read ini config files. See the <a href="https://php.net/parse_ini_file" target="_blank" rel="noreferrer">PHP documentation</a> for more information on the specifics of ini files. To use a core config engine, you&#39;ll need to attach it to Configure using <code>Configure::config()</code></p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Cake\\Core\\Configure\\Engine\\PhpConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Read config files from config</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PhpConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Read config files from another path.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PhpConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path/to/your/config/files/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>You can have multiple engines attached to Configure, each reading different kinds or sources of configuration files. You can interact with attached engines using a few other methods on Configure. To check which engine aliases are attached you can use <code>Configure::configured()</code></p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get the array of aliases for attached engines.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configured</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Check if a specific engine is attached</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configured</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="static-method-cake-core-configure-drop-name" tabindex="-1">Static Method <code>Cake\\Core\\Configure::drop($name)</code> <a class="header-anchor" href="#static-method-cake-core-configure-drop-name" aria-label="Permalink to &quot;Static Method \`Cake\\Core\\Configure::drop($name)\`&quot;">​</a></h4><p>You can also remove attached engines. <code>Configure::drop(&#39;default&#39;)</code> would remove the default engine alias. Any future attempts to load configuration files with that engine would fail</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><a id="loading-configuration-files"></a></p><h3 id="loading-configuration-files" tabindex="-1">Loading Configuration Files <a class="header-anchor" href="#loading-configuration-files" aria-label="Permalink to &quot;Loading Configuration Files&quot;">​</a></h3><h4 id="static-method-cake-core-configure-load-key-config-default-merge-true" tabindex="-1">Static Method <code>Cake\\Core\\Configure::load($key, $config = &#39;default&#39;, $merge = true)</code> <a class="header-anchor" href="#static-method-cake-core-configure-load-key-config-default-merge-true" aria-label="Permalink to &quot;Static Method \`Cake\\Core\\Configure::load($key, $config = &#39;default&#39;, $merge = true)\`&quot;">​</a></h4><p>Once you&#39;ve attached a config engine to Configure you can load configuration files</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Load my_file.php using the &#39;default&#39; engine object.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my_file&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Loaded configuration files merge their data with the existing runtime configuration in Configure. This allows you to overwrite and add new values into the existing runtime configuration. By setting <code>$merge</code> to <code>true</code>, values will not ever overwrite the existing configuration.</p><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>When merging configuration files with <code>$merge = true</code>, dot notation in keys is not expanded</p></div><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// config1.php</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Key1&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;Key2&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;Key3&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;NestedKey1&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// config2.php</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Key1.Key2&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;Key3&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;NestedKey2&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Value2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;config1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;config2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Now Key1.Key2.Key3 has the value [&#39;NestedKey2&#39; =&gt; &#39;Value2&#39;]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// instead of [&#39;NestedKey1&#39; =&gt; &#39;Value&#39;, &#39;NestedKey2&#39; =&gt; &#39;Value2&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="creating-or-modifying-configuration-files" tabindex="-1">Creating or Modifying Configuration Files <a class="header-anchor" href="#creating-or-modifying-configuration-files" aria-label="Permalink to &quot;Creating or Modifying Configuration Files&quot;">​</a></h3><h4 id="static-method-cake-core-configure-dump-key-config-default-keys" tabindex="-1">Static Method <code>Cake\\Core\\Configure::dump($key, $config = &#39;default&#39;, $keys = [])</code> <a class="header-anchor" href="#static-method-cake-core-configure-dump-key-config-default-keys" aria-label="Permalink to &quot;Static Method \`Cake\\Core\\Configure::dump($key, $config = &#39;default&#39;, $keys = [])\`&quot;">​</a></h4><p>Dumps all or some of the data in Configure into a file or storage system supported by a config engine. The serialization format is decided by the config engine attached as $config. For example, if the &#39;default&#39; engine is a <code>Cake\\Core\\Configure\\Engine\\PhpConfig</code>, the generated file will be a PHP configuration file loadable by the <code>Cake\\Core\\Configure\\Engine\\PhpConfig</code></p><p>Given that the &#39;default&#39; engine is an instance of PhpConfig. Save all data in Configure to the file <code>my_config.php</code></p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dump</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my_config&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Save only the error handling configuration::</p><pre><code>Configure::dump(&#39;error&#39;, &#39;default&#39;, [&#39;Error&#39;, &#39;Exception&#39;]);
</code></pre><p><code>Configure::dump()</code> can be used to either modify or overwrite configuration files that are readable with <code>Configure::load()</code></p><h3 id="storing-runtime-configuration" tabindex="-1">Storing Runtime Configuration <a class="header-anchor" href="#storing-runtime-configuration" aria-label="Permalink to &quot;Storing Runtime Configuration&quot;">​</a></h3><h4 id="static-method-cake-core-configure-store-name-cacheconfig-default-data-null" tabindex="-1">Static Method <code>Cake\\Core\\Configure::store($name, $cacheConfig = &#39;default&#39;, $data = null)</code> <a class="header-anchor" href="#static-method-cake-core-configure-store-name-cacheconfig-default-data-null" aria-label="Permalink to &quot;Static Method \`Cake\\Core\\Configure::store($name, $cacheConfig = &#39;default&#39;, $data = null)\`&quot;">​</a></h4><p>You can also store runtime configuration values for use in a future request. Since configure only remembers values for the current request, you will need to store any modified configuration information if you want to use it in subsequent requests</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Store the current configuration in the &#39;user_1234&#39; key in the &#39;default&#39; cache.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user_1234&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Stored configuration data is persisted in the named cache configuration. See the [/core-libraries/caching\` documentation for more information on caching.</p><h3 id="restoring-runtime-configuration" tabindex="-1">Restoring Runtime Configuration <a class="header-anchor" href="#restoring-runtime-configuration" aria-label="Permalink to &quot;Restoring Runtime Configuration&quot;">​</a></h3><h4 id="static-method-cake-core-configure-restore-name-cacheconfig-default" tabindex="-1">Static Method <code>Cake\\Core\\Configure::restore($name, $cacheConfig = &#39;default&#39;)</code> <a class="header-anchor" href="#static-method-cake-core-configure-restore-name-cacheconfig-default" aria-label="Permalink to &quot;Static Method \`Cake\\Core\\Configure::restore($name, $cacheConfig = &#39;default&#39;)\`&quot;">​</a></h4><p>Once you&#39;ve stored runtime configuration, you&#39;ll probably need to restore it so you can access it again. <code>Configure::restore()</code> does exactly that</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Restore runtime configuration from the cache.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Configure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">restore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user_1234&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>When restoring configuration information it&#39;s important to restore it with the same key, and cache configuration as was used to store it. Restored information is merged on top of the existing runtime configuration.</p><h3 id="configuration-engines" tabindex="-1">Configuration Engines <a class="header-anchor" href="#configuration-engines" aria-label="Permalink to &quot;Configuration Engines&quot;">​</a></h3><p>CakePHP provides the ability to load configuration files from a number of different sources, and features a pluggable system for <a href="https://api.cakephp.org/5.x/interface-Cake.Core.Configure.ConfigEngineInterface.html" target="_blank" rel="noreferrer">creating your own configuration engines</a>. The built in configuration engines are:</p><ul><li><a href="https://api.cakephp.org/5.x/class-Cake.Core.Configure.Engine.JsonConfig.html" target="_blank" rel="noreferrer">JsonConfig</a></li><li><a href="https://api.cakephp.org/5.x/class-Cake.Core.Configure.Engine.IniConfig.html" target="_blank" rel="noreferrer">IniConfig</a></li><li><a href="https://api.cakephp.org/5.x/class-Cake.Core.Configure.Engine.PhpConfig.html" target="_blank" rel="noreferrer">PhpConfig</a></li></ul><p>By default your application will use <code>PhpConfig</code>.</p>`,131)])])}const g=s(t,[["render",l]]);export{c as __pageData,g as default};
