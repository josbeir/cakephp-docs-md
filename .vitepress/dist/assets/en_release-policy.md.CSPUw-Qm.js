import{_ as a,c as r,o as s,ag as t}from"./chunks/framework.DRADY2L-.js";const m=JSON.parse('{"title":"Release Policy","description":"","frontmatter":{},"headers":[],"relativePath":"en/release-policy.md","filePath":"en/release-policy.md","lastUpdated":null}'),n={name:"en/release-policy.md"};function o(l,e,i,c,h,p){return s(),r("div",null,[...e[0]||(e[0]=[t('<h1 id="release-policy" tabindex="-1">Release Policy <a class="header-anchor" href="#release-policy" aria-label="Permalink to &quot;Release Policy&quot;">​</a></h1><p>CakePHP follows Semantic Versioning for all releases. This follows the versioning convention of <strong>major.minor.patch</strong>.</p><p>The development team tries to guarantee each release follow the restrictions and and guarantees below.</p><h3 id="major-releases" tabindex="-1">Major Releases <a class="header-anchor" href="#major-releases" aria-label="Permalink to &quot;Major Releases&quot;">​</a></h3><p>Major releases are generally not backwards compatible. Although CakePHP tries to not change many large features in major releases, there are API changes.</p><p>Changes in major release can include almost anything but are always used to remove deprecated features and update interfaces.</p><p>Any behavior changes that are not backwards compatible are made in major changes.</p><p>Each major release typically comes with an upgrade guide and many automatic code upgrades using rector.</p><h3 id="minor-releases" tabindex="-1">Minor Releases <a class="header-anchor" href="#minor-releases" aria-label="Permalink to &quot;Minor Releases&quot;">​</a></h3><p>Minor release are generally backwards compatible with the previous minor and patch release.</p><p>Features might be deprecated, but they are never removed in a minor release.</p><p>Interfaces are not changed, but annotations might be added for new methods exposed in implementations provided by CakePHP.</p><p>New features are usually only added in minor releases so users can follow migration notes. New features can also include new exceptions thrown when behavior is fixed or bugs are reported.</p><p>Behavior changes that require documentation are made in minor releases, but these are still typically backwards compatible. Some exceptions can be made if the issue is severe.</p><p>.. note: Minor releases are also known as point releases.</p><h3 id="patch-releases" tabindex="-1">Patch Releases <a class="header-anchor" href="#patch-releases" aria-label="Permalink to &quot;Patch Releases&quot;">​</a></h3><p>Patch releases are always backwards compatible. Only changes that fix broken features are made.</p><p>Typically, users should be able to rely on patch releases not changing behavior except to fix an issue.</p><p>Issues that change long-standing behavior are typically not in patch releases. These are considered behavior changes and will go into either minor or major releases so users can migrate.</p><p>.. note: Patch releases are also known as bug fix releases.</p><h3 id="experimental-features" tabindex="-1">Experimental Features <a class="header-anchor" href="#experimental-features" aria-label="Permalink to &quot;Experimental Features&quot;">​</a></h3><p>When a new feature is added where the API is still changing, it can be marked <strong>experimental</strong>.</p><p>Experimental features should follow the same minor and bug fix release convention. However, API changes can go into minor releases which might significantly change behavior.</p><p>Users should always expect an API to change before experimental features are fully released.</p>',24)])])}const u=a(n,[["render",o]]);export{m as __pageData,u as default};
