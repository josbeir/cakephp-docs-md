import{_ as a,c as s,o as i,ag as n}from"./chunks/framework.DRADY2L-.js";const u=JSON.parse('{"title":"Code","description":"","frontmatter":{"title":"Code","keywords":"cakephp source code,code patches,test ref,descriptive name,bob barker,initial setup,global user,database connection,clone,repository,user information,enhancement,back patches,checkout"},"headers":[],"relativePath":"en/contributing/code.md","filePath":"en/contributing/code.md","lastUpdated":null}'),t={name:"en/contributing/code.md"};function r(l,e,o,h,p,c){return i(),s("div",null,[...e[0]||(e[0]=[n(`<h1 id="code" tabindex="-1">Code <a class="header-anchor" href="#code" aria-label="Permalink to &quot;Code&quot;">​</a></h1><p>Patches and pull requests are a great way to contribute code back to CakePHP. Pull requests can be created in GitHub, and are preferred over patch files in ticket comments.</p><h2 id="initial-setup" tabindex="-1">Initial Setup <a class="header-anchor" href="#initial-setup" aria-label="Permalink to &quot;Initial Setup&quot;">​</a></h2><p>Before working on patches for CakePHP, it&#39;s a good idea to get your environment setup. You&#39;ll need the following software:</p><ul><li>Git</li><li>PHP |minphpversion| or greater</li><li>PHPUnit 5.7.0 or greater</li></ul><p>Set up your user information with your name/handle and working email address</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git config --global user.name &#39;Bob Barker&#39;</span></span>
<span class="line"><span>git config --global user.email &#39;bob.barker@example.com&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>If you are new to Git, we highly recommend you to read the excellent and free <a href="https://git-scm.com/book/" target="_blank" rel="noreferrer">ProGit</a> book.</p></div><p>Get a clone of the CakePHP source code from GitHub:</p><ul><li>If you don&#39;t have a <a href="https://github.com" target="_blank" rel="noreferrer">GitHub</a> account, create one.</li><li>Fork the <a href="https://github.com/cakephp/cakephp" target="_blank" rel="noreferrer">CakePHP repository</a> by clicking the <strong>Fork</strong> button.</li></ul><p>After your fork is made, clone your fork to your local machine</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git clone git@github.com:YOURNAME/cakephp.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Add the original CakePHP repository as a remote repository. You&#39;ll use this later to fetch changes from the CakePHP repository. This will let you stay up to date with CakePHP</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cakephp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git://github.com/cakephp/cakephp.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Now that you have CakePHP setup you should be able to define a <code>$test</code><a href="/en/orm/database-basics.html#database-configuration">database connection</a>, and <a href="/en/development/testing.html#running-tests">run all the tests</a>.</p><h2 id="working-on-a-patch" tabindex="-1">Working on a Patch <a class="header-anchor" href="#working-on-a-patch" aria-label="Permalink to &quot;Working on a Patch&quot;">​</a></h2><p>Each time you want to work on a bug, feature or enhancement create a topic branch.</p><p>The branch you create should be based on the version that your fix/enhancement is for. For example if you are fixing a bug in <code>3.x</code> you would want to use the <code>master</code> branch as the base for your branch. If your change is a bug fix for the 2.x release series, you should use the <code>2.x</code> branch</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># fixing a bug on 3.x</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fetch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ticket-1234</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream/master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># fixing a bug on 2.x</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fetch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ticket-1234</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream/2.x</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>Use a descriptive name for your branch. Referencing the ticket or feature name is a good convention. Examples include <code>ticket-1234</code> and <code>feature-awesome</code>.</p></div><p>The above will create a local branch based on the upstream (CakePHP) 2.x branch. Work on your fix, and make as many commits as you need; but keep in mind the following:</p><ul><li>Follow the <a href="/en/contributing/cakephp-coding-conventions.html">contributing/cakephp-coding-conventions</a>.</li><li>Add a test case to show the bug is fixed, or that the new feature works.</li><li>Keep your commits logical, and write clear commit messages that provide context on what you changed and why.</li></ul><h2 id="submitting-a-pull-request" tabindex="-1">Submitting a Pull Request <a class="header-anchor" href="#submitting-a-pull-request" aria-label="Permalink to &quot;Submitting a Pull Request&quot;">​</a></h2><p>Once your changes are done and you&#39;re ready for them to be merged into CakePHP, you&#39;ll want to update your branch</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Rebase fix on top of master</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout master</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git fetch upstream</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git merge upstream/master</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout &lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">branch_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git rebase master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>This will fetch + merge in any changes that have happened in CakePHP since you started. It will then rebase - or replay your changes on top of the current code. You might encounter a conflict during the <code>rebase</code>. If the rebase quits early you can see which files are conflicted/un-merged with <code>git status</code>. Resolve each conflict, and then continue the rebase</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git add &lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; # do this for each conflicted file.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git rebase --continue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Check that all your tests continue to pass. Then push your branch to your fork::</p><pre><code>git push origin &lt;branch-name&gt;
</code></pre><p>If you&#39;ve rebased after pushing your branch, you&#39;ll need to use force push</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push --force origin &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">branch-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Once your branch is on GitHub, you can submit a pull request on GitHub.</p><h3 id="choosing-where-your-changes-will-be-merged-into" tabindex="-1">Choosing Where Your Changes will be Merged Into <a class="header-anchor" href="#choosing-where-your-changes-will-be-merged-into" aria-label="Permalink to &quot;Choosing Where Your Changes will be Merged Into&quot;">​</a></h3><p>When making pull requests you should make sure you select the correct base branch, as you cannot edit it once the pull request is created.</p><ul><li>If your change is a <strong>bugfix</strong> and doesn&#39;t introduce new functionality and only corrects existing behavior that is present in the current release. Then choose <strong>master</strong> as your merge target.</li><li>If your change is a <strong>new feature</strong> or an addition to the framework, then you should choose the branch with the next version number. For example if the current stable release is <code>4.0.0</code>, the branch accepting new features will be <code>4.next</code>.</li><li>If your change is a breaks existing functionality, or APIs then you&#39;ll have to choose then next major release. For example, if the current release is <code>4.0.0</code> then the next time existing behavior can be broken will be in <code>5.x</code> so you should target that branch.</li></ul><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>Remember that all code you contribute to CakePHP will be licensed under the MIT License, and the <a href="https://cakefoundation.org/old" target="_blank" rel="noreferrer">Cake Software Foundation </a> will become the owner of any contributed code. Contributors should follow the <a href="https://cakephp.org/get-involved" target="_blank" rel="noreferrer">CakePHP Community Guidelines</a>.</p></div><p>All bug fixes merged into a maintenance branch will also be merged into upcoming releases periodically by the core team.</p>`,37)])])}const k=a(t,[["render",r]]);export{u as __pageData,k as default};
