import{_ as o,c as t,o as r,ag as a}from"./chunks/framework.DRADY2L-.js";const u=JSON.parse('{"title":"CakePHP Folder Structure","description":"","frontmatter":{"title":"CakePHP Folder Structure","keywords":"internal libraries,core configuration,model descriptions,external vendors,connection details,folder structure,party libraries,personal commitment,database connection,internationalization,configuration files,folders,application development,readme,lib,configured,logs,config,third party,cakephp"},"headers":[],"relativePath":"en/intro/cakephp-folder-structure.md","filePath":"en/intro/cakephp-folder-structure.md","lastUpdated":null}'),l={name:"en/intro/cakephp-folder-structure.md"};function i(s,e,n,d,p,c){return r(),t("div",null,[...e[0]||(e[0]=[a('<h1 id="cakephp-folder-structure" tabindex="-1">CakePHP Folder Structure <a class="header-anchor" href="#cakephp-folder-structure" aria-label="Permalink to &quot;CakePHP Folder Structure&quot;">​</a></h1><p>After you&#39;ve downloaded the CakePHP application skeleton, there are a few top level folders you should see:</p><ul><li><p>The <em>bin</em> folder holds the Cake console executables.</p></li><li><p>The <em>config</em> folder holds the [/development/configuration` files CakePHP uses. Database connection details, bootstrapping, core configuration files and more should be stored here.</p></li><li><p>The <em>plugins</em> folder is where the <a href="/en/plugins.html">plugins</a> your application uses are stored.</p></li><li><p>The <em>logs</em> folder normally contains your log files, depending on your log configuration.</p></li><li><p>The <em>src</em> folder will be where your application’s source files will be placed.</p></li><li><p>The <em>templates</em> folder has presentational files placed here: elements, error pages, layouts, and view template files.</p></li><li><p>The <em>resources</em> folder has sub folder for various types of resource files. The <em>locales</em> sub folder stores language files for internationalization.</p></li><li><p>The <em>tests</em> folder will be where you put the test cases for your application.</p></li><li><p>The <em>tmp</em> folder is where CakePHP stores temporary data. The actual data it stores depends on how you have CakePHP configured, but this folder is usually used to store translation messages, model descriptions and sometimes session information.</p></li><li><p>The <em>vendor</em> folder is where CakePHP and other application dependencies will be installed by <a href="https://getcomposer.org" target="_blank" rel="noreferrer">Composer</a>. Editing these files is not advised, as Composer will overwrite your changes next time you update.</p></li><li><p>The <em>webroot</em> directory is the public document root of your application. It contains all the files you want to be publicly reachable.</p><p>Make sure that the <em>tmp</em> and <em>logs</em> folders exist and are writable, otherwise the performance of your application will be severely impacted. In debug mode, CakePHP will warn you, if these directories are not writable.</p></li></ul><h2 id="the-src-folder" tabindex="-1">The src Folder <a class="header-anchor" href="#the-src-folder" aria-label="Permalink to &quot;The src Folder&quot;">​</a></h2><p>CakePHP&#39;s <em>src</em> folder is where you will do most of your application development. Let&#39;s look a little closer at the folders inside <em>src</em>.</p><p>Command Contains your application&#39;s console commands. See <a href="/en/console-commands/commands.html">console-commands/commands</a> to learn more. Console Contains the installation script executed by Composer. Controller Contains your application&#39;s <a href="/en/controllers.html">controllers</a> and their components. Middleware Stores any <a href="/en/controllers/middleware.html">controllers/middleware</a> for your application. Model Contains your application&#39;s tables, entities and behaviors. View Presentational classes are placed here: views, cells, helpers.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The folder <code>Command</code> is not present by default. You can add it when you need it.</p></div>',7)])])}const h=o(l,[["render",i]]);export{u as __pageData,h as default};
