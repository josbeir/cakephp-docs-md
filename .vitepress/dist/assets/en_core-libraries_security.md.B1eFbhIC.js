import{_ as a,c as i,o as e,ag as t}from"./chunks/framework.DRADY2L-.js";const k=JSON.parse('{"title":"Security","description":"","frontmatter":{"title":"Security","keywords":"security api,secret password,cipher text,php class,class security,text key,security library,object instance,security measures,basic security,security level,string type,fallback,hash,data security,singleton,inactivity,php encrypt,implementation,php security"},"headers":[],"relativePath":"en/core-libraries/security.md","filePath":"en/core-libraries/security.md","lastUpdated":null}'),n={name:"en/core-libraries/security.md"};function l(r,s,h,p,c,d){return e(),i("div",null,[...s[0]||(s[0]=[t(`<h1 id="security-utility" tabindex="-1">Security Utility <a class="header-anchor" href="#security-utility" aria-label="Permalink to &quot;Security Utility&quot;">​</a></h1><p><strong>Namespace:</strong> <code>Cake\\Utility</code></p><h3 id="class-cake-utility-security" tabindex="-1">Class <code>Cake\\Utility\\Security</code> <a class="header-anchor" href="#class-cake-utility-security" aria-label="Permalink to &quot;Class \`Cake\\Utility\\Security\`&quot;">​</a></h3><p>The <a href="https://api.cakephp.org/5.x/class-Cake.Utility.Security.html" target="_blank" rel="noreferrer">security library</a> handles basic security measures such as providing methods for hashing and encrypting data.</p><h2 id="encrypting-and-decrypting-data" tabindex="-1">Encrypting and Decrypting Data <a class="header-anchor" href="#encrypting-and-decrypting-data" aria-label="Permalink to &quot;Encrypting and Decrypting Data&quot;">​</a></h2><h4 id="static-method-cake-utility-security-encrypt-text-key-hmacsalt-null" tabindex="-1">Static Method <code>Cake\\Utility\\Security::encrypt($text, $key, $hmacSalt = null)</code> <a class="header-anchor" href="#static-method-cake-utility-security-encrypt-text-key-hmacsalt-null" aria-label="Permalink to &quot;Static Method \`Cake\\Utility\\Security::encrypt($text, $key, $hmacSalt = null)\`&quot;">​</a></h4><h4 id="static-method-cake-utility-security-decrypt-cipher-key-hmacsalt-null" tabindex="-1">Static Method <code>Cake\\Utility\\Security::decrypt($cipher, $key, $hmacSalt = null)</code> <a class="header-anchor" href="#static-method-cake-utility-security-decrypt-cipher-key-hmacsalt-null" aria-label="Permalink to &quot;Static Method \`Cake\\Utility\\Security::decrypt($cipher, $key, $hmacSalt = null)\`&quot;">​</a></h4><p>Encrypt <code>$text</code> using AES-256. The <code>$key</code> should be a value with a lots of variance in the data much like a good password. The returned result will be the encrypted value with an HMAC checksum.</p><p>The <a href="https://php.net/openssl" target="_blank" rel="noreferrer">openssl</a> extension is required for encrypting/decrypting.</p><p>An example use would be</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Assuming key is stored somewhere it can be re-used for</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// decryption later.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;wt1U5MACWJFTXGenFoZoiLwQGrLgdbHA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Security</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($value, $key);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>If you do not supply an HMAC salt, the value of <code>Security::getSalt()</code> will be used. Encrypted values can be decrypted using <code>Cake\\Utility\\Security::decrypt()</code>.</p><p>This method should <strong>never</strong> be used to store passwords.</p><p>Decrypt a previously encrypted value. The <code>$key</code> and <code>$hmacSalt</code> parameters must match the values used to encrypt or decryption will fail. An example use would be</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Assuming the key is stored somewhere it can be re-used for</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Decryption later.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;wt1U5MACWJFTXGenFoZoiLwQGrLgdbHA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$cipher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">secrets;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Security</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($cipher, $key);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>If the value cannot be decrypted due to changes in the key or HMAC salt <code>false</code> will be returned.</p><h2 id="hashing-data" tabindex="-1">Hashing Data <a class="header-anchor" href="#hashing-data" aria-label="Permalink to &quot;Hashing Data&quot;">​</a></h2><h4 id="static-method-cake-utility-security-hash-string-type-null-salt-false" tabindex="-1">Static Method <code>Cake\\Utility\\Security::hash( $string, $type = NULL, $salt = false )</code> <a class="header-anchor" href="#static-method-cake-utility-security-hash-string-type-null-salt-false" aria-label="Permalink to &quot;Static Method \`Cake\\Utility\\Security::hash( $string, $type = NULL, $salt = false )\`&quot;">​</a></h4><p>Create a hash from string using given method. Fallback on next available method. If <code>$salt</code> is set to <code>true</code>, the application&#39;s salt value will be used</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Using the application&#39;s salt value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$sha1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Security</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;CakePHP Framework&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sha1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Using a custom salt value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$sha1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Security</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;CakePHP Framework&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sha1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-salt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Using the default hash algorithm</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$hash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Security</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;CakePHP Framework&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>The <code>hash()</code> method supports the following hashing strategies:</p><ul><li>md5</li><li>sha1</li><li>sha256</li></ul><p>And any other hash algorithm that PHP&#39;s <code>hash()</code> function supports.</p><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>You should not be using <code>hash()</code> for passwords in new applications. Instead you should use the <code>DefaultPasswordHasher</code> class which uses bcrypt by default.</p></div><h2 id="getting-secure-random-data" tabindex="-1">Getting Secure Random Data <a class="header-anchor" href="#getting-secure-random-data" aria-label="Permalink to &quot;Getting Secure Random Data&quot;">​</a></h2><h4 id="static-method-cake-utility-security-randombytes-length" tabindex="-1">Static Method <code>Cake\\Utility\\Security::randomBytes($length)</code> <a class="header-anchor" href="#static-method-cake-utility-security-randombytes-length" aria-label="Permalink to &quot;Static Method \`Cake\\Utility\\Security::randomBytes($length)\`&quot;">​</a></h4><p>Get <code>$length</code> number of bytes from a secure random source. This function draws data from one of the following sources:</p><ul><li>PHP&#39;s <code>random_bytes</code> function.</li><li><code>openssl_random_pseudo_bytes</code> from the SSL extension.</li></ul><p>If neither source is available a warning will be emitted and an unsafe value will be used for backwards compatibility reasons.</p><h4 id="static-method-cake-utility-security-randomstring-length" tabindex="-1">Static Method <code>Cake\\Utility\\Security::randomString($length)</code> <a class="header-anchor" href="#static-method-cake-utility-security-randomstring-length" aria-label="Permalink to &quot;Static Method \`Cake\\Utility\\Security::randomString($length)\`&quot;">​</a></h4><p>Get a random string <code>$length</code> long from a secure random source. This method draws from the same random source as <code>randomBytes()</code> and will encode the data as a hexadecimal string.</p>`,31)])])}const y=a(n,[["render",l]]);export{k as __pageData,y as default};
