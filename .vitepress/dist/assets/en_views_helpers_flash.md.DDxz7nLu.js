import{_ as s,c as a,o as t,ag as n}from"./chunks/framework.DRADY2L-.js";const g=JSON.parse('{"title":"Flash","description":"","frontmatter":{},"headers":[],"relativePath":"en/views/helpers/flash.md","filePath":"en/views/helpers/flash.md","lastUpdated":null}'),i={name:"en/views/helpers/flash.md"};function l(r,e,h,o,p,d){return t(),a("div",null,[...e[0]||(e[0]=[n(`<h1 id="flash" tabindex="-1">Flash <a class="header-anchor" href="#flash" aria-label="Permalink to &quot;Flash&quot;">​</a></h1><p><strong>Namespace:</strong> <code>Cake\\View\\Helper</code></p><h3 id="class-cake-view-helper-flashhelper-view-view-array-config" tabindex="-1">Class <code>Cake\\View\\Helper\\FlashHelper(View $view, array $config = [])</code> <a class="header-anchor" href="#class-cake-view-helper-flashhelper-view-view-array-config" aria-label="Permalink to &quot;Class \`Cake\\View\\Helper\\FlashHelper(View $view, array $config = [])\`&quot;">​</a></h3><p>FlashHelper provides a way to render flash messages that were set in <code>$_SESSION</code> by <a href="/en/controllers/components/flash.html">FlashComponent</a>. <a href="/en/controllers/components/flash.html">FlashComponent</a> and FlashHelper primarily use elements to render flash messages. Flash elements are found under the <strong>templates/element/flash</strong> directory. You&#39;ll notice that CakePHP&#39;s App template comes with three flash elements: <strong>success.php</strong>, <strong>default.php</strong>, and <strong>error.php</strong>.</p><h2 id="rendering-flash-messages" tabindex="-1">Rendering Flash Messages <a class="header-anchor" href="#rendering-flash-messages" aria-label="Permalink to &quot;Rendering Flash Messages&quot;">​</a></h2><p>To render a flash message, you can simply use FlashHelper&#39;s <code>render()</code> method in your template file</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Flash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>By default, CakePHP uses a &quot;flash&quot; key for flash messages in a session. But, if you&#39;ve specified a key when setting the flash message in <a href="/en/controllers/components/flash.html">FlashComponent</a>, you can specify which flash key to render</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Flash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;other&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>You can also override any of the options that were set in FlashComponent::</p><pre><code>// In your Controller
$this-&gt;Flash-&gt;set(&#39;The user has been saved.&#39;, [
    &#39;element&#39; =&gt; &#39;success&#39;
]);

// In your template file: Will use great_success.php instead of success.php
&lt;?= $this-&gt;Flash-&gt;render(&#39;flash&#39;, [
    &#39;element&#39; =&gt; &#39;great_success&#39;
]);

// In your template file: the flashy element file from the Company Plugin
&lt;?= $this-&gt;Flash-&gt;render(&#39;flash&#39;, [
    &#39;element&#39; =&gt; &#39;Company.flashy&#39;
]);
</code></pre><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>When building custom flash message templates, be sure to properly HTML encode any user data. CakePHP won&#39;t escape flash message parameters for you.</p></div><p>For more information about the available array options, please refer to the <a href="/en/controllers/components/flash.html">FlashComponent</a> section.</p><h2 id="routing-prefix-and-flash-messages" tabindex="-1">Routing Prefix and Flash Messages <a class="header-anchor" href="#routing-prefix-and-flash-messages" aria-label="Permalink to &quot;Routing Prefix and Flash Messages&quot;">​</a></h2><p>If you have a Routing prefix configured, you can now have your Flash elements stored in <strong>templates/{Prefix}/element/flash</strong>. This way, you can have specific messages layouts for each part of your application. For instance, using different layouts for your front-end and admin section.</p><h2 id="flash-messages-and-themes" tabindex="-1">Flash Messages and Themes <a class="header-anchor" href="#flash-messages-and-themes" aria-label="Permalink to &quot;Flash Messages and Themes&quot;">​</a></h2><p>The FlashHelper uses normal elements to render the messages and will therefore obey any theme you might have specified. So when your theme has a <strong>templates/element/flash/error.php</strong> file it will be used, just as with any Elements and Views.</p>`,17)])])}const m=s(i,[["render",l]]);export{g as __pageData,m as default};
