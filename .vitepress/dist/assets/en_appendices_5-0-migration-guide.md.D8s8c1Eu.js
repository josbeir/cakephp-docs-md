import{_ as a,c as i,o,ag as s}from"./chunks/framework.DRADY2L-.js";const u=JSON.parse('{"title":"5.0 Migration Guide","description":"","frontmatter":{},"headers":[],"relativePath":"en/appendices/5-0-migration-guide.md","filePath":"en/appendices/5-0-migration-guide.md","lastUpdated":null}'),t={name:"en/appendices/5-0-migration-guide.md"};function n(r,e,l,d,c,h){return o(),i("div",null,[...e[0]||(e[0]=[s(`<h1 id="_5-0-migration-guide" tabindex="-1">5.0 Migration Guide <a class="header-anchor" href="#_5-0-migration-guide" aria-label="Permalink to &quot;5.0 Migration Guide&quot;">​</a></h1><p>CakePHP 5.0 contains breaking changes, and is not backwards compatible with 4.x releases. Before attempting to upgrade to 5.0, first upgrade to 4.5 and resolve all deprecation warnings.</p><p>Refer to the [/appendices/5-0-upgrade-guide\` for step by step instructions on how to upgrade to 5.0.</p><h2 id="deprecated-features-removed" tabindex="-1">Deprecated Features Removed <a class="header-anchor" href="#deprecated-features-removed" aria-label="Permalink to &quot;Deprecated Features Removed&quot;">​</a></h2><p>All methods, properties and functionality that were emitting deprecation warnings as of 4.5 have been removed.</p><h2 id="breaking-changes" tabindex="-1">Breaking Changes <a class="header-anchor" href="#breaking-changes" aria-label="Permalink to &quot;Breaking Changes&quot;">​</a></h2><p>In addition to the removal of deprecated features there have been breaking changes made:</p><h3 id="global" tabindex="-1">Global <a class="header-anchor" href="#global" aria-label="Permalink to &quot;Global&quot;">​</a></h3><ul><li>Type declarations were added to all function parameter and returns where possible. These are intended to match the docblock annotations, but include fixes for incorrect annotations.</li><li>Type declarations were added to all class properties where possible. These also include some fixes for incorrect annotations.</li><li>The <code>SECOND</code>, <code>MINUTE</code>, <code>HOUR</code>, <code>DAY</code>, <code>WEEK</code>, <code>MONTH</code>, <code>YEAR</code> constants were removed.</li><li>Use of <code>#[\\AllowDynamicProperties]</code> removed everywhere. It was used for the following classes:</li><li><code>Command/Command</code></li><li><code>Console/Shell</code></li><li><code>Controller/Component</code></li><li><code>Controller/Controller</code></li><li><code>Mailer/Mailer</code></li><li><code>View/Cell</code></li><li><code>View/Helper</code></li><li><code>View/View</code></li><li>The supported database engine versions were updated:</li><li>MySQL (5.7 or higher)</li><li>MariaDB (10.1 or higher)</li><li>PostgreSQL (9.6 or higher)</li><li>Microsoft SQL Server (2012 or higher)</li><li>SQLite 3 (3.16 or higher)</li></ul><h3 id="auth" tabindex="-1">Auth <a class="header-anchor" href="#auth" aria-label="Permalink to &quot;Auth&quot;">​</a></h3><ul><li><code>Auth</code> has been removed. Use the <a href="https://book.cakephp.org/authentication/3/en/index.html" target="_blank" rel="noreferrer">cakephp/authentication</a> and <a href="https://book.cakephp.org/authorization/3/en/index.html" target="_blank" rel="noreferrer">cakephp/authorization</a> plugins instead.</li></ul><h3 id="cache" tabindex="-1">Cache <a class="header-anchor" href="#cache" aria-label="Permalink to &quot;Cache&quot;">​</a></h3><ul><li>The <code>Wincache</code> engine was removed. The wincache extension is not supported on PHP 8.</li></ul><h3 id="collection" tabindex="-1">Collection <a class="header-anchor" href="#collection" aria-label="Permalink to &quot;Collection&quot;">​</a></h3><ul><li><code>combine()</code> now throws an exception if the key path or group path doesn&#39;t exist or contains a null value. This matches the behavior of <code>indexBy()</code> and <code>groupBy()</code>.</li></ul><h3 id="console" tabindex="-1">Console <a class="header-anchor" href="#console" aria-label="Permalink to &quot;Console&quot;">​</a></h3><ul><li><code>BaseCommand::__construct()</code> was removed.</li><li><code>ConsoleIntegrationTestTrait::useCommandRunner()</code> was removed since it&#39;s no longer needed.</li><li><code>Shell</code> has been removed and should be replaced with <a href="https://book.cakephp.org/5/en/console-commands/commands.html" target="_blank" rel="noreferrer">Command</a></li><li><code>ConsoleOptionParser::addSubcommand()</code> was removed alongside the removal of <code>Shell</code>. Subcommands should be replaced with <code>Command</code> classes that implement <code>Command::defaultName()</code> to define the necessary command name.</li><li><code>BaseCommand</code> now emits <code>Command.beforeExecute</code> and <code>Command.afterExecute</code> events around the command&#39;s <code>execute()</code> method being invoked by the framework.</li></ul><h3 id="connection" tabindex="-1">Connection <a class="header-anchor" href="#connection" aria-label="Permalink to &quot;Connection&quot;">​</a></h3><ul><li><code>Connection::prepare()</code> has been removed. You can use <code>Connection::execute()</code> instead to execute a SQL query by specifing the SQL string, params and types in a single call.</li><li><code>Connection::enableQueryLogging()</code> has been removed. If you haven&#39;t enabled logging through the connection config then you can later set the logger instance for the driver to enable query logging <code>$connection-&gt;getDriver()-&gt;setLogger()</code>.</li></ul><h3 id="controller" tabindex="-1">Controller <a class="header-anchor" href="#controller" aria-label="Permalink to &quot;Controller&quot;">​</a></h3><ul><li>The method signature for <code>Controller::__construct()</code> has changed. So you need to adjust your code accordingly if you are overriding the constructor.</li><li>After loading components are no longer set as dynamic properties. Instead <code>Controller</code> uses <code>__get()</code> to provide property access to components. This change can impact applications that use <code>property_exists()</code> on components.</li><li>The components&#39; <code>Controller.shutdown</code> event callback has been renamed from <code>shutdown</code> to <code>afterFilter</code> to match the controller one. This makes the callbacks more consistent.</li><li><code>PaginatorComponent</code> has been removed and should be replaced by calling <code>$this-&gt;paginate()</code> in your controller or using <code>Cake\\Datasource\\Paging\\NumericPaginator</code> directly</li><li><code>RequestHandlerComponent</code> has been removed. See the <a href="https://book.cakephp.org/4/en/appendices/4-4-migration-guide.html#requesthandlercomponent" target="_blank" rel="noreferrer">4.4 migration</a> guide for how to upgrade</li><li><code>SecurityComponent</code> has been removed. Use <code>FormProtectionComponent</code> for form tampering protection or <code>HttpsEnforcerMiddleware</code> to enforce use of HTTPS for requests instead.</li><li><code>Controller::paginate()</code> no longer accepts query options like <code>contain</code> for its <code>$settings</code> argument. You should instead use the <code>finder</code> option <code>$this-&gt;paginate($this-&gt;Articles, [&#39;finder&#39; =&gt; &#39;published&#39;])</code>. Or you can create required select query before hand and then pass it to <code>paginate()</code><code>$query = $this-&gt;Articles-&gt;find()-&gt;where([&#39;is_published&#39; =&gt; true]); $this-&gt;paginate($query);</code>.</li></ul><h3 id="core" tabindex="-1">Core <a class="header-anchor" href="#core" aria-label="Permalink to &quot;Core&quot;">​</a></h3><ul><li>The function <code>getTypeName()</code> has been dropped. Use PHP&#39;s <code>get_debug_type()</code> instead.</li><li>The dependency on <code>league/container</code> was updated to <code>4.x</code>. This will require the addition of typehints to your <code>ServiceProvider</code> implementations.</li><li><code>deprecationWarning()</code> now has a <code>$version</code> parameter.</li><li>The <code>App.uploadedFilesAsObjects</code> configuration option has been removed alongside of support for PHP file upload shaped arrays throughout the framework.</li><li><code>ClassLoader</code> has been removed. Use composer to generate autoload files instead.</li></ul><h3 id="database" tabindex="-1">Database <a class="header-anchor" href="#database" aria-label="Permalink to &quot;Database&quot;">​</a></h3><ul><li>The <code>DateTimeType</code> and <code>DateType</code> now always return immutable objects. Additionally the interface for <code>Date</code> objects reflects the <code>ChronosDate</code> interface which lacks all of the time related methods that were present in CakePHP 4.x.</li><li><code>DateType::setLocaleFormat()</code> no longer accepts an array.</li><li><code>Query</code> now accepts only <code>\\Closure</code> parameters instead of <code>callable</code>. Callables can be converted to closures using the new first-class array syntax in PHP 8.1.</li><li><code>Query::execute()</code> no longer runs results decorator callbacks. You must use <code>Query::all()</code> instead.</li><li><code>TableSchemaAwareInterface</code> was removed.</li><li><code>Driver::quote()</code> was removed. Use prepared statements instead.</li><li><code>Query::orderBy()</code> was added to replace <code>Query::order()</code>.</li><li><code>Query::groupBy()</code> was added to replace <code>Query::group()</code>.</li><li><code>SqlDialectTrait</code> has been removed and all its functionality has been moved into the <code>Driver</code> class itself.</li><li><code>CaseExpression</code> has been removed and should be replaced with <code>QueryExpression::case()</code> or <code>CaseStatementExpression</code></li><li><code>Connection::connect()</code> has been removed. Use <code>$connection-&gt;getDriver()-&gt;connect()</code> instead.</li><li><code>Connection::disconnect()</code> has been removed. Use <code>$connection-&gt;getDriver()-&gt;disconnect()</code> instead.</li><li><code>cake.database.queries</code> has been added as an alternative to the <code>queriesLog</code> scope</li><li>The ability to enable/disable ResultSet buffering has been removed. Results are always buffered.</li></ul><h3 id="datasource" tabindex="-1">Datasource <a class="header-anchor" href="#datasource" aria-label="Permalink to &quot;Datasource&quot;">​</a></h3><ul><li>The <code>getAccessible()</code> method was added to <code>EntityInterface</code>. Non-ORM implementations need to implement this method now.</li><li>The <code>aliasField()</code> method was added to <code>RepositoryInterface</code>. Non-ORM implementations need to implement this method now.</li></ul><h3 id="event" tabindex="-1">Event <a class="header-anchor" href="#event" aria-label="Permalink to &quot;Event&quot;">​</a></h3><ul><li>Event payloads must be an array. Other object such as <code>ArrayAccess</code> are no longer cast to array and will raise a <code>TypeError</code> now.</li><li>It is recommended to adjust event handlers to be void methods and use <code>$event-&gt;setResult()</code> instead of returning the result</li></ul><h3 id="error" tabindex="-1">Error <a class="header-anchor" href="#error" aria-label="Permalink to &quot;Error&quot;">​</a></h3><ul><li><code>ErrorHandler</code> and <code>ConsoleErrorHandler</code> have been removed. See the <a href="https://book.cakephp.org/4/en/appendices/4-4-migration-guide.html#errorhandler-consoleerrorhandler" target="_blank" rel="noreferrer">4.4 migration</a> guide for how to upgrade</li><li><code>ExceptionRenderer</code> has been removed and should be replaced with <code>WebExceptionRenderer</code></li><li><code>ErrorLoggerInterface::log()</code> has been removed and should be replaced with <code>ErrorLoggerInterface::logException()</code></li><li><code>ErrorLoggerInterface::logMessage()</code> has been removed and should be replaced with <code>ErrorLoggerInterface::logError()</code></li></ul><h3 id="filesystem" tabindex="-1">Filesystem <a class="header-anchor" href="#filesystem" aria-label="Permalink to &quot;Filesystem&quot;">​</a></h3><ul><li>The Filesystem package was removed, and <code>Filesystem</code> class was moved to the Utility package.</li></ul><h3 id="http" tabindex="-1">Http <a class="header-anchor" href="#http" aria-label="Permalink to &quot;Http&quot;">​</a></h3><ul><li><code>ServerRequest</code> is no longer compatible with <code>files</code> as arrays. This behavior has been disabled by default since 4.1.0. The <code>files</code> data will now always contain <code>UploadedFileInterfaces</code> objects.</li></ul><h3 id="i18n" tabindex="-1">I18n <a class="header-anchor" href="#i18n" aria-label="Permalink to &quot;I18n&quot;">​</a></h3><ul><li><code>FrozenDate</code> was renamed to <code>Date</code> and <code>FrozenTime</code> was renamed to <code>DateTime</code>.</li><li><code>Time</code> now extends <code>Cake\\Chronos\\ChronosTime</code> and is therefore immutable.</li><li><code>Date</code> objects do not extend <code>DateTimeInterface</code> anymore - therefore you can&#39;t compare them with <code>DateTime</code> objects. See the <a href="https://github.com/cakephp/chronos/releases/tag/3.0.2" target="_blank" rel="noreferrer">cakephp/chronos release documentation</a> for more information.</li><li><code>Date::parseDateTime()</code> was removed.</li><li><code>Date::parseTime()</code> was removed.</li><li><code>Date::setToStringFormat()</code> and <code>Date::setJsonEncodeFormat()</code> no longer accept an array.</li><li><code>Date::i18nFormat()</code> and <code>Date::nice()</code> no longer accept a timezone parameter.</li><li>Translation files for plugins with vendor prefixed names (<code>FooBar/Awesome</code>) will now have that prefix in the file name, e.g. <code>foo_bar_awesome.po</code> to avoid collision with a <code>awesome.po</code> file from a corresponding plugin (<code>Awesome</code>).</li></ul><h3 id="log" tabindex="-1">Log <a class="header-anchor" href="#log" aria-label="Permalink to &quot;Log&quot;">​</a></h3><ul><li>Log engine config now uses <code>null</code> instead of <code>false</code> to disable scopes. So instead of <code>&#39;scopes&#39; =&gt; false</code> you need to use <code>&#39;scopes&#39; =&gt; null</code> in your log config.</li></ul><h3 id="mailer" tabindex="-1">Mailer <a class="header-anchor" href="#mailer" aria-label="Permalink to &quot;Mailer&quot;">​</a></h3><ul><li><code>Email</code> has been removed. Use <a href="https://book.cakephp.org/5/en/core-libraries/email.html" target="_blank" rel="noreferrer">Mailer</a> instead.</li><li><code>cake.mailer</code> has been added as an alternative to the <code>email</code> scope</li></ul><h3 id="orm" tabindex="-1">ORM <a class="header-anchor" href="#orm" aria-label="Permalink to &quot;ORM&quot;">​</a></h3><ul><li><code>EntityTrait::has()</code> now returns <code>true</code> when an attribute exists and is set to <code>null</code>. In previous versions of CakePHP this would return <code>false</code>. See the release notes for 4.5.0 for how to adopt this behavior in 4.x.</li><li><code>EntityTrait::extractOriginal()</code> now returns only existing fields, similar to <code>extractOriginalChanged()</code>.</li><li>Finder arguments are now required to be associative arrays as they were always expected to be.</li><li><code>TranslateBehavior</code> now defaults to the <code>ShadowTable</code> strategy. If you are using the <code>Eav</code> strategy you will need to update your behavior configuration to retain the previous behavior.</li><li><code>allowMultipleNulls</code> option for <code>isUnique</code> rule now default to true matching the original 3.x behavior.</li><li><code>Table::query()</code> has been removed in favor of query-type specific functions.</li><li><code>Table::updateQuery()</code>, <code>Table::selectQuery()</code>, <code>Table::insertQuery()</code>, and <code>Table::deleteQuery()</code>) were added and return the new type-specific query objects below.</li><li><code>SelectQuery</code>, <code>InsertQuery</code>, <code>UpdateQuery</code> and <code>DeleteQuery</code> were added which represent only a single type of query and do not allow switching between query types nor calling functions unrelated to the specific query type.</li><li><code>Table::_initializeSchema()</code> has been removed and should be replaced by calling <code>$this-&gt;getSchema()</code> inside the <code>initialize()</code> method.</li><li><code>SaveOptionsBuilder</code> has been removed. Use a normal array for options instead.</li></ul><h3 id="routing" tabindex="-1">Routing <a class="header-anchor" href="#routing" aria-label="Permalink to &quot;Routing&quot;">​</a></h3><ul><li>Static methods <code>connect()</code>, <code>prefix()</code>, <code>scope()</code> and <code>plugin()</code> of the <code>Router</code> have been removed and should be replaced by calling their non-static method variants via the <code>RouteBuilder</code> instance.</li><li><code>RedirectException</code> has been removed. Use <code>\\Cake\\Http\\Exception\\RedirectException</code> instead.</li></ul><h3 id="testsuite" tabindex="-1">TestSuite <a class="header-anchor" href="#testsuite" aria-label="Permalink to &quot;TestSuite&quot;">​</a></h3><ul><li><code>TestSuite</code> was removed. Users should use environment variables to customize unit test settings instead.</li><li><code>TestListenerTrait</code> was removed. PHPUnit dropped support for these listeners. See [/appendices/phpunit10\`</li><li><code>IntegrationTestTrait::configRequest()</code> now merges config when called multiple times instead of replacing the currently present config.</li></ul><h3 id="validation" tabindex="-1">Validation <a class="header-anchor" href="#validation" aria-label="Permalink to &quot;Validation&quot;">​</a></h3><ul><li><code>Validation::isEmpty()</code> is no longer compatible with file upload shaped arrays. Support for PHP file upload arrays has been removed from <code>ServerRequest</code> as well so you should not see this as a problem outside of tests.</li><li>Previously, most data validation error messages were simply <code>The provided value is invalid</code>. Now, the data validation error messages are worded more precisely. For example, \`\`The provided value must be greater than or equal to \`5\`\`\`.</li></ul><h3 id="view" tabindex="-1">View <a class="header-anchor" href="#view" aria-label="Permalink to &quot;View&quot;">​</a></h3><ul><li><code>ViewBuilder</code> options are now truly associative (string keys).</li><li><code>NumberHelper</code> and <code>TextHelper</code> no longer accept an <code>engine</code> config.</li><li><code>ViewBuilder::setHelpers()</code> parameter <code>$merge</code> was removed. Use <code>ViewBuilder::addHelpers()</code> instead.</li><li>Inside <code>View::initialize()</code>, prefer using <code>addHelper()</code> instead of <code>loadHelper()</code>. All configured helpers will be loaded afterwards, anyway.</li><li><code>View\\Widget\\FileWidget</code> is no longer compatible with PHP file upload shaped arrays. This is aligned with <code>ServerRequest</code> and <code>Validation</code> changes.</li><li><code>FormHelper</code> no longer sets <code>autocomplete=off</code> on CSRF token fields. This was a workaround for a Safari bug that is no longer relevant.</li></ul><h2 id="deprecations" tabindex="-1">Deprecations <a class="header-anchor" href="#deprecations" aria-label="Permalink to &quot;Deprecations&quot;">​</a></h2><p>The following is a list of deprecated methods, properties and behaviors. These features will continue to function in 5.x and will be removed in 6.0.</p><h3 id="database-1" tabindex="-1">Database <a class="header-anchor" href="#database-1" aria-label="Permalink to &quot;Database&quot;">​</a></h3><ul><li><code>Query::order()</code> was deprecated. Use <code>Query::orderBy()</code> instead now that <code>Connection</code> methods are no longer proxied. This aligns the function name with the SQL statement.</li><li><code>Query::group()</code> was deprecated. Use <code>Query::groupBy()</code> instead now that <code>Connection</code> methods are no longer proxied. This aligns the function name with the SQL statement.</li></ul><h3 id="orm-1" tabindex="-1">ORM <a class="header-anchor" href="#orm-1" aria-label="Permalink to &quot;ORM&quot;">​</a></h3><ul><li>Calling <code>Table::find()</code> with options array is deprecated. Use <a href="https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments" target="_blank" rel="noreferrer">named arguments</a> instead. For e.g. instead of <code>find(&#39;all&#39;, [&#39;conditions&#39; =&gt; $array])</code> use <code>find(&#39;all&#39;, conditions: $array)</code>. Similarly for custom finder options, instead of <code>find(&#39;list&#39;, [&#39;valueField&#39; =&gt; &#39;name&#39;])</code> use <code>find(&#39;list&#39;, valueField: &#39;name&#39;)</code> or multiple named arguments like <code>find(type: &#39;list&#39;, valueField: &#39;name&#39;, conditions: $array)</code>.</li></ul><h2 id="new-features" tabindex="-1">New Features <a class="header-anchor" href="#new-features" aria-label="Permalink to &quot;New Features&quot;">​</a></h2><h3 id="improved-type-checking" tabindex="-1">Improved type checking <a class="header-anchor" href="#improved-type-checking" aria-label="Permalink to &quot;Improved type checking&quot;">​</a></h3><p>CakePHP 5 leverages the expanded type system feature available in PHP 8.1+. CakePHP also uses <code>assert()</code> to provide improved error messages and additional type soundness. In production mode, you can configure PHP to not generate code for <code>assert()</code> yielding improved application performance. See the <a href="/en/deployment.html#symlink-assets">symlink-assets</a> for how to do this.</p><h3 id="collection-1" tabindex="-1">Collection <a class="header-anchor" href="#collection-1" aria-label="Permalink to &quot;Collection&quot;">​</a></h3><ul><li>Added <code>unique()</code> which filters out duplicate value specified by provided callback.</li><li><code>reject()</code> now supports a default callback which filters out truthy values which is the inverse of the default behavior of <code>filter()</code></li></ul><h3 id="core-1" tabindex="-1">Core <a class="header-anchor" href="#core-1" aria-label="Permalink to &quot;Core&quot;">​</a></h3><ul><li>The <code>services()</code> method was added to <code>PluginInterface</code>.</li><li><code>PluginCollection::addFromConfig()</code> has been added to <a href="/en/plugins.html#loading-a-plugin">simplify plugin loading</a>.</li></ul><h3 id="database-2" tabindex="-1">Database <a class="header-anchor" href="#database-2" aria-label="Permalink to &quot;Database&quot;">​</a></h3><ul><li><code>ConnectionManager</code> now supports read and write connection roles. Roles can be configured with <code>read</code> and <code>write</code> keys in the connection config that override the shared config.</li><li><code>Query::all()</code> was added which runs result decorator callbacks and returns a result set for select queries.</li><li><code>Query::comment()</code> was added to add a SQL comment to the executed query. This makes it easier to debug queries.</li><li><code>EnumType</code> was added to allow mapping between PHP backed enums and a string or integer column.</li><li><code>getMaxAliasLength()</code> and <code>getConnectionRetries()</code> were added to <code>DriverInterface</code>.</li><li>Supported drivers now automatically add auto-increment only to integer primary keys named &quot;id&quot; instead of all integer primary keys. Setting &#39;autoIncrement&#39; to false always disables on all supported drivers.</li></ul><h3 id="http-1" tabindex="-1">Http <a class="header-anchor" href="#http-1" aria-label="Permalink to &quot;Http&quot;">​</a></h3><ul><li>Added support for <a href="https://www.php-fig.org/psr/psr-17/" target="_blank" rel="noreferrer">PSR-17</a> factories interface. This allows <code>cakephp/http</code> to provide a client implementation to libraries that allow automatic interface resolution like php-http.</li><li>Added <code>CookieCollection::__get()</code> and <code>CookieCollection::__isset()</code> to add ergonomic ways to access cookies without exceptions.</li></ul><h3 id="orm-2" tabindex="-1">ORM <a class="header-anchor" href="#orm-2" aria-label="Permalink to &quot;ORM&quot;">​</a></h3><h3 id="required-entity-fields" tabindex="-1">Required Entity Fields <a class="header-anchor" href="#required-entity-fields" aria-label="Permalink to &quot;Required Entity Fields&quot;">​</a></h3><p>Entities have a new opt-in functionality that allows making entities handle properties more strictly. The new behavior is called &#39;required fields&#39;. When enabled, accessing properties that are not defined in the entity will raise exceptions. This impacts the following usage</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$entity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$entity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$entity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOriginal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($entity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">attribute);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$entity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">attribute;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Fields are considered defined if they pass <code>array_key_exists</code>. This includes null values. Because this can be a tedious to enable feature, it was deferred to 5.0. We&#39;d like any feedback you have on this feature as we&#39;re considering making this the default behavior in the future.</p><h3 id="typed-finder-parameters" tabindex="-1">Typed Finder Parameters <a class="header-anchor" href="#typed-finder-parameters" aria-label="Permalink to &quot;Typed Finder Parameters&quot;">​</a></h3><p>Table finders can now have typed arguments as required instead of an options array. For e.g. a finder for fetching posts by category or user</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findByCategoryOrUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SelectQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $query, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $options)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($options[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;categoryId&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        $query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;category_id&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $options[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;categoryId&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($options[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;userId&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        $query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user_id&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $options[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;userId&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $query;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>can now be written as::</p><pre><code>public function findByCategoryOrUser(SelectQuery $query, ?int $categoryId = null, ?int $userId = null)
{
    if ($categoryId) {
        $query-&gt;where([&#39;category_id&#39; =&gt; $categoryId]);
    }
    if ($userId) {
        $query-&gt;where([&#39;user_id&#39; =&gt; $userId]);
    }

    return $query;
}
</code></pre><p>The finder can then be called as <code>find(&#39;byCategoryOrUser&#39;, userId: $somevar)</code>. You can even include the special named arguments for setting query clauses. <code>find(&#39;byCategoryOrUser&#39;, userId: $somevar, conditions: [&#39;enabled&#39; =&gt; true])</code>.</p><p>A similar change has been applied to the <code>RepositoryInterface::get()</code> method</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    $author </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Authors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($id, [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;contain&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Books&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;finder&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;latest&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>can now be written as::</p><pre><code>public function view(int $id)
{
    $author = $this-&gt;Authors-&gt;get($id, contain: [&#39;Books&#39;], finder: &#39;latest&#39;);
}
</code></pre><h3 id="testsuite-1" tabindex="-1">TestSuite <a class="header-anchor" href="#testsuite-1" aria-label="Permalink to &quot;TestSuite&quot;">​</a></h3><ul><li><code>IntegrationTestTrait::requestAsJson()</code> has been added to set JSON headers for the next request.</li></ul><h3 id="plugin-installer" tabindex="-1">Plugin Installer <a class="header-anchor" href="#plugin-installer" aria-label="Permalink to &quot;Plugin Installer&quot;">​</a></h3><ul><li>The plugin installer has been updated to automatically handle class autoloading for your app plugins. So you can remove the namespace to path mappings for your plugins from your <code>composer.json</code> and just run <code>composer dumpautoload</code>.</li></ul>`,87)])])}const g=a(t,[["render",n]]);export{u as __pageData,g as default};
