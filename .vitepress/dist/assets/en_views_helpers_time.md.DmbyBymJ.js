import{_ as s,c as a,o as i,ag as t}from"./chunks/framework.DRADY2L-.js";const c=JSON.parse('{"title":"TimeHelper","description":"The TimeHelper will help you format time and test time.","frontmatter":{"title":"TimeHelper","description":"The TimeHelper will help you format time and test time.","keywords":"time helper,format time,timezone,unix epoch,time strings,time zone offset,utc,gmt"},"headers":[],"relativePath":"en/views/helpers/time.md","filePath":"en/views/helpers/time.md","lastUpdated":null}'),n={name:"en/views/helpers/time.md"};function r(l,e,p,o,h,m){return i(),a("div",null,[...e[0]||(e[0]=[t(`<h1 id="time" tabindex="-1">Time <a class="header-anchor" href="#time" aria-label="Permalink to &quot;Time&quot;">​</a></h1><p><strong>Namespace:</strong> <code>Cake\\View\\Helper</code></p><h3 id="class-cake-view-helper-timehelper-view-view-array-config" tabindex="-1">Class <code>Cake\\View\\Helper\\TimeHelper(View $view, array $config = [])</code> <a class="header-anchor" href="#class-cake-view-helper-timehelper-view-view-array-config" aria-label="Permalink to &quot;Class \`Cake\\View\\Helper\\TimeHelper(View $view, array $config = [])\`&quot;">​</a></h3><p>The TimeHelper allows for the quick processing of time related information. The TimeHelper has two main tasks that it can perform:</p><p>#. It can format time strings. #. It can test time.</p><h2 id="using-the-helper" tabindex="-1">Using the Helper <a class="header-anchor" href="#using-the-helper" aria-label="Permalink to &quot;Using the Helper&quot;">​</a></h2><p>A common use of the TimeHelper is to offset the date and time to match a user&#39;s time zone. Lets use a forum as an example. Your forum has many users who may post messages at any time from any part of the world. A way to manage the time is to save all dates and times as GMT+0 or UTC. Uncomment the line <code>date_default_timezone_set(&#39;UTC&#39;);</code> in <strong>config/bootstrap.php</strong> to ensure your application&#39;s time zone is set to GMT+0.</p><p>Next add a time zone field to your users table and make the necessary modifications to allow your users to set their time zone. Now that we know the time zone of the logged in user we can correct the date and time on our posts using the TimeHelper</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Time</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  $post</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">created,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  \\IntlDateFormatter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  $user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">time_zone</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Will display &#39;Saturday, August 22, 2011 at 11:53:00 PM GMT&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// for a user in GMT+0. While displaying,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;Saturday, August 22, 2011 at 03:53 PM GMT-8:00&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// for a user in GMT-8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Most of TimeHelper&#39;s features are intended as backwards compatible interfaces for applications that are upgrading from older versions of CakePHP. Because the ORM returns <code>Cake\\I18n\\Time</code> instances for every <code>timestamp</code> and <code>datetime</code> column, you can use the methods there to do most tasks. For example, to read about the accepted formatting strings take a look at the <a href="https://api.cakephp.org/5.x/class-Cake.I18n.Time.html#i18nFormat()" target="_blank" rel="noreferrer">Cake\\I18n\\Time::i18nFormat()</a> method.</p>`,10)])])}const k=s(n,[["render",r]]);export{c as __pageData,k as default};
