import{_ as a,c as o,o as t,ag as i}from"./chunks/framework.DRADY2L-.js";const p=JSON.parse('{"title":"5.2 Migration Guide","description":"","frontmatter":{},"headers":[],"relativePath":"en/appendices/5-2-migration-guide.md","filePath":"en/appendices/5-2-migration-guide.md","lastUpdated":null}'),d={name:"en/appendices/5-2-migration-guide.md"};function r(n,e,s,l,c,u){return t(),o("div",null,[...e[0]||(e[0]=[i('<h1 id="_5-2-migration-guide" tabindex="-1">5.2 Migration Guide <a class="header-anchor" href="#_5-2-migration-guide" aria-label="Permalink to &quot;5.2 Migration Guide&quot;">​</a></h1><p>The 5.2.0 release is a backwards compatible with 5.0. It adds new functionality and introduces new deprecations. Any functionality deprecated in 5.x will be removed in 6.0.0.</p><h2 id="behavior-changes" tabindex="-1">Behavior Changes <a class="header-anchor" href="#behavior-changes" aria-label="Permalink to &quot;Behavior Changes&quot;">​</a></h2><ul><li><code>ValidationSet::add()</code> will now raise errors when a rule is added with a name that is already defined. This change aims to prevent rules from being overwritten by accident.</li><li><code>Http\\Session</code> will now raise an exception when an invalid session preset is used.</li><li><code>FormProtectionComponent</code> now raises <code>Cake\\Controller\\Exception\\FormProtectionException</code>. This class is a subclass of <code>BadRequestException</code>, and offers the benefit of being filterable from logging.</li><li><code>NumericPaginator::paginate()</code> now uses the <code>finder</code> option even when a <code>SelectQuery</code> instance is passed to it.</li></ul><h2 id="deprecations" tabindex="-1">Deprecations <a class="header-anchor" href="#deprecations" aria-label="Permalink to &quot;Deprecations&quot;">​</a></h2><h3 id="console" tabindex="-1">Console <a class="header-anchor" href="#console" aria-label="Permalink to &quot;Console&quot;">​</a></h3><ul><li><code>Arguments::getMultipleOption()</code> is deprecated. Use <code>getArrayOption()</code> instead.</li></ul><h3 id="datasource" tabindex="-1">Datasource <a class="header-anchor" href="#datasource" aria-label="Permalink to &quot;Datasource&quot;">​</a></h3><ul><li><p>The ability to cast an <code>EntityInterface</code> instance to string has been deprecated. You should <code>json_encode()</code> the entity instead.</p></li><li><p>Mass assigning multiple entity fields using <code>EntityInterface::set()</code> is deprecated. Use <code>EntityInterface::patch()</code> instead. For e.g. change usage like <code>$entity-&gt;set([&#39;field1&#39; =&gt; &#39;value1&#39;, &#39;field2&#39; =&gt; &#39;value2&#39;])</code> to <code>$entity-&gt;patch([&#39;field1&#39; =&gt; &#39;value1&#39;, &#39;field2&#39; =&gt; &#39;value2&#39;])</code>.</p></li></ul><h3 id="event" tabindex="-1">Event <a class="header-anchor" href="#event" aria-label="Permalink to &quot;Event&quot;">​</a></h3><ul><li>Returning values from event listeners / callbacks is deprecated. Use <code>$event-&gt;setResult()</code> instead or <code>$event-&gt;stopPropogation()</code> to just stop the event propogation.</li></ul><h3 id="view" tabindex="-1">View <a class="header-anchor" href="#view" aria-label="Permalink to &quot;View&quot;">​</a></h3><ul><li>The <code>errorClass</code> option of <code>FormHelper</code> has been deprecated in favour of using a template string. To upgrade move your <code>errorClass</code> definition to a template set. See <a href="/en/views/helpers/form.html#customizing-templates">customizing-templates</a>.</li></ul><h2 id="new-features" tabindex="-1">New Features <a class="header-anchor" href="#new-features" aria-label="Permalink to &quot;New Features&quot;">​</a></h2><h3 id="console-1" tabindex="-1">Console <a class="header-anchor" href="#console-1" aria-label="Permalink to &quot;Console&quot;">​</a></h3><ul><li>The <code>cake counter_cache</code> command was added. This command can be used to regenerate counters for models that use <code>CounterCacheBehavior</code>.</li><li><code>ConsoleIntegrationTestTrait::debugOutput()</code> makes it easier to debug integration tests for console commands.</li><li><code>ConsoleInputArgument</code> now supports a <code>separator</code> option. This option allows positional arguments to be delimited with a character sequence like <code>,</code>. CakePHP will split the positional argument into an array when arguments are parsed.</li><li><code>Arguments::getArrayArgumentAt()</code>, and <code>Arguments::getArrayArgument()</code> were added. These methods allow you to read <code>separator</code> delimitered positional arguments as arrays.</li><li><code>ConsoleInputOption</code> now supports a <code>separator</code> option. This option allows option values to be delimited with a character sequence like <code>,</code>. CakePHP will split the option value into an array when arguments are parsed.</li><li><code>Arguments::getArrayArgumentAt()</code>, <code>Arguments::getArrayArgument()</code>, and <code>Arguments::getArrayOption()</code> were added. These methods allow you to read <code>separator</code> delimitered positional arguments as arrays.</li></ul><h3 id="database" tabindex="-1">Database <a class="header-anchor" href="#database" aria-label="Permalink to &quot;Database&quot;">​</a></h3><ul><li>The <code>nativeuuid</code> type was added. This type enables <code>uuid</code> columns to be used in Mysql connections with MariaDB. In all other drivers, <code>nativeuuid</code> is an alias for <code>uuid</code>.</li><li><code>Cake\\Database\\Type\\JsonType::setDecodingOptions()</code> was added. This method lets you define the value for the <code>$flags</code> argument of <code>json_decode()</code>.</li><li><code>CounterCacheBehavior::updateCounterCache()</code> was added. This method allows you to update the counter cache values for all records of the configured associations. <code>CounterCacheCommand</code> was also added to do the same through the console.</li><li><code>Cake\\Database\\Driver::quote()</code> was added. This method provides a way to quote values to be used in SQL queries where prepared statements cannot be used.</li></ul><h3 id="datasource-1" tabindex="-1">Datasource <a class="header-anchor" href="#datasource-1" aria-label="Permalink to &quot;Datasource&quot;">​</a></h3><ul><li>Application rules can now use <code>Closure</code> to define the validation message. This allows you to create dynamic validation messages based on the entity state and validation rule options.</li></ul><h3 id="error" tabindex="-1">Error <a class="header-anchor" href="#error" aria-label="Permalink to &quot;Error&quot;">​</a></h3><ul><li>Custom exceptions can have specific error handling logic defined in <code>ErrorController</code>.</li></ul><h3 id="orm" tabindex="-1">ORM <a class="header-anchor" href="#orm" aria-label="Permalink to &quot;ORM&quot;">​</a></h3><ul><li><code>CounterCacheBehavior::updateCounterCache()</code> has been added. This method allows you to update the counter cache values for all records of the configured associations.</li><li><code>BelongsToMany::setJunctionProperty()</code> and <code>getJunctionProperty()</code> were added. These methods allow you to customize the <code>_joinData</code> property that is used to hydrate junction table records.</li><li><code>Table::findOrCreate()</code> now accepts an array as second argument to directly pass data in.</li></ul><h3 id="testsuite" tabindex="-1">TestSuite <a class="header-anchor" href="#testsuite" aria-label="Permalink to &quot;TestSuite&quot;">​</a></h3><ul><li><code>TestFixture::$strictFields</code> was added. Enabling this property will make fixtures raise an error if a fixture&#39;s record list contains fields that do not exist in the schema.</li></ul><h3 id="view-1" tabindex="-1">View <a class="header-anchor" href="#view-1" aria-label="Permalink to &quot;View&quot;">​</a></h3><ul><li><code>FormHelper::deleteLink()</code> has been added as convenience wrapper for delete links in templates using <code>DELETE</code> method.</li><li><code>HtmlHelper::importmap()</code> was added. This method allows you to define import maps for your JavaScript files.</li><li><code>FormHelper</code> now uses the <code>containerClass</code> template to apply a class to the form control div. The default value is <code>input</code>.</li></ul>',28)])])}const m=a(d,[["render",r]]);export{p as __pageData,m as default};
