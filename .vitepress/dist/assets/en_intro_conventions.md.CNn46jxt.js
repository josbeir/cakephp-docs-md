import{_ as t,c as a,o as n,ag as s}from"./chunks/framework.DRADY2L-.js";const u=JSON.parse('{"title":"CakePHP Conventions","description":"","frontmatter":{"title":"CakePHP Conventions","keywords":"web development experience,maintenance nightmare,index method,legacy systems,method names,php class,uniform system,config files,tenets,articles,conventions,conventional controller,best practices,maps,visibility,news articles,functionality,logic,cakephp,developers"},"headers":[],"relativePath":"en/intro/conventions.md","filePath":"en/intro/conventions.md","lastUpdated":null}'),o={name:"en/intro/conventions.md"};function i(d,e,l,r,c,p){return n(),a("div",null,[...e[0]||(e[0]=[s(`<h1 id="cakephp-conventions" tabindex="-1">CakePHP Conventions <a class="header-anchor" href="#cakephp-conventions" aria-label="Permalink to &quot;CakePHP Conventions&quot;">​</a></h1><p>We are big fans of convention over configuration. While it takes a bit of time to learn CakePHP&#39;s conventions, you save time in the long run. By following conventions, you get free functionality, and you liberate yourself from the maintenance nightmare of tracking config files. Conventions also make for a very uniform development experience, allowing other developers to jump in and help.</p><h2 id="controller-conventions" tabindex="-1">Controller Conventions <a class="header-anchor" href="#controller-conventions" aria-label="Permalink to &quot;Controller Conventions&quot;">​</a></h2><p>Controller class names are plural, CamelCased, and end in <code>Controller</code>. <code>UsersController</code> and <code>MenuLinksController</code> are both examples of conventional controller names.</p><p>Public methods on Controllers are often exposed as &#39;actions&#39; accessible through a web browser. They are camelBacked. For example the <code>/users/view-me</code> maps to the <code>viewMe()</code> method of the <code>UsersController</code> out of the box (if one uses default dashed inflection in routing). Protected or private methods cannot be accessed with routing.</p><p>For inflection of acronyms it is useful to treat them as words, so <code>CMS</code> would be <code>Cms</code>.</p><h4 id="url-considerations-for-controller-names" tabindex="-1">URL Considerations for Controller Names <a class="header-anchor" href="#url-considerations-for-controller-names" aria-label="Permalink to &quot;URL Considerations for Controller Names&quot;">​</a></h4><p>As you&#39;ve just seen, single word controllers map to a simple lower case URL path. For example, <code>UsersController</code> (which would be defined in the file name <strong>UsersController.php</strong>) is accessed from <code>http://example.com/users</code>.</p><p>While you can route multiple word controllers in any way you like, the convention is that your URLs are lowercase and dashed using the <code>DashedRoute</code> class, therefore <code>/menu-links/view-all</code> is the correct form to access the <code>MenuLinksController::viewAll()</code> action.</p><p>When you create links using <code>this-&gt;Html-&gt;link()</code>, you can use the following conventions for the url array</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Html</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;link-title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;prefix&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;MyPrefix&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // CamelCased</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;plugin&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;MyPlugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CamelCased</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;controller&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ControllerName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CamelCased</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;action&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;actionName&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // camelBacked</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>For more information on CakePHP URLs and parameter handling, see <a href="/en/development/routing.html#routes-configuration">routes-configuration</a>. <a id="file-and-classname-conventions"></a></p><h2 id="file-and-class-name-conventions" tabindex="-1">File and Class Name Conventions <a class="header-anchor" href="#file-and-class-name-conventions" aria-label="Permalink to &quot;File and Class Name Conventions&quot;">​</a></h2><p>In general, filenames match the class names, and follow the PSR-4 standard for autoloading. The following are some examples of class names and their filenames:</p><ul><li>The Controller class <code>LatestArticlesController</code> would be found in a file named <strong>LatestArticlesController.php</strong></li><li>The Component class <code>MyHandyComponent</code> would be found in a file named <strong>MyHandyComponent.php</strong></li><li>The Table class <code>OptionValuesTable</code> would be found in a file named <strong>OptionValuesTable.php</strong>.</li><li>The Entity class <code>OptionValue</code> would be found in a file named <strong>OptionValue.php</strong>.</li><li>The Behavior class <code>EspeciallyFunkableBehavior</code> would be found in a file named <strong>EspeciallyFunkableBehavior.php</strong></li><li>The View class <code>SuperSimpleView</code> would be found in a file named <strong>SuperSimpleView.php</strong></li><li>The Helper class <code>BestEverHelper</code> would be found in a file named <strong>BestEverHelper.php</strong></li></ul><p>Each file would be located in the appropriate folder/namespace in your app folder. <a id="model-and-database-conventions"></a></p><h2 id="database-conventions" tabindex="-1">Database Conventions <a class="header-anchor" href="#database-conventions" aria-label="Permalink to &quot;Database Conventions&quot;">​</a></h2><p>Table names corresponding to CakePHP models are plural and underscored. For example <code>users</code>, <code>menu_links</code>, and <code>user_favorite_pages</code> respectively. Table name whose name contains multiple words should only pluralize the last word, for example, <code>menu_links</code>.</p><p>Column names with two or more words are underscored, for example, <code>first_name</code>.</p><p>Foreign keys in hasMany, belongsTo/hasOne relationships are recognized by default as the (singular) name of the related table followed by <code>_id</code>. So if Users hasMany Articles, the <code>articles</code> table will refer to the <code>users</code> table via a <code>user_id</code> foreign key. For a table like <code>menu_links</code> whose name contains multiple words, the foreign key would be <code>menu_link_id</code>.</p><p>Join (or &quot;junction&quot;) tables are used in BelongsToMany relationships between models. These should be named for the tables they connect. The names should be pluralized and sorted alphabetically: <code>articles_tags</code>, not <code>tags_articles</code> or <code>article_tags</code>. <em>The bake command will not work if this convention is not followed.</em> If the junction table holds any data other than the linking foreign keys, you should create a concrete entity/table class for the table.</p><p>In addition to using an auto-incrementing integer as primary keys, you can also use UUID columns. CakePHP will create UUID values automatically using (<code>Cake\\Utility\\Text::uuid()</code>) whenever you save new records using the <code>Table::save()</code> method.</p><h2 id="model-conventions" tabindex="-1">Model Conventions <a class="header-anchor" href="#model-conventions" aria-label="Permalink to &quot;Model Conventions&quot;">​</a></h2><p>Table class names are plural, CamelCased and end in <code>Table</code>. <code>UsersTable</code>, <code>MenuLinksTable</code>, and <code>UserFavoritePagesTable</code> are all examples of table class names matching the <code>users</code>, <code>menu_links</code> and <code>user_favorite_pages</code> tables respectively.</p><p>Entity class names are singular CamelCased and have no suffix. <code>User</code>, <code>MenuLink</code>, and <code>UserFavoritePage</code> are all examples of entity names matching the <code>users</code>, <code>menu_links</code> and <code>user_favorite_pages</code> tables respectively.</p><p>Enum class names should use a <code>{Entity}{Column}</code> convention, and enum cases should use CamelCased names.</p><h2 id="view-conventions" tabindex="-1">View Conventions <a class="header-anchor" href="#view-conventions" aria-label="Permalink to &quot;View Conventions&quot;">​</a></h2><p>View template files are named after the controller functions they display, in an underscored form. The <code>viewAll()</code> function of the <code>ArticlesController</code> class will look for a view template in <strong>templates/Articles/view_all.php</strong>.</p><p>The basic pattern is <strong>templates/Controller/underscored_function_name.php</strong>.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>By default CakePHP uses English inflections. If you have database tables/columns that use another language, you will need to add inflection rules (from singular to plural and vice-versa). You can use <code>Cake\\Utility\\Inflector</code> to define your custom inflection rules. See the documentation about [/core-libraries/inflector\` for more information.</p></div><h2 id="plugins-conventions" tabindex="-1">Plugins Conventions <a class="header-anchor" href="#plugins-conventions" aria-label="Permalink to &quot;Plugins Conventions&quot;">​</a></h2><p>It is useful to prefix a CakePHP plugin with &quot;cakephp-&quot; in the package name. This makes the name semantically related on the framework it depends on.</p><p>Do <strong>not</strong> use the CakePHP namespace (cakephp) as vendor name as this is reserved to CakePHP owned plugins. The convention is to use lowercase letters and dashes as separator</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// Bad</span></span>
<span class="line"><span>cakephp/foo-bar</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Good</span></span>
<span class="line"><span>your-name/cakephp-foo-bar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>See <a href="https://github.com/FriendsOfCake/awesome-cakephp/blob/master/CONTRIBUTING.md#tips-for-creating-cakephp-plugins" target="_blank" rel="noreferrer">awesome list recommendations</a> for details.</p><h2 id="summarized" tabindex="-1">Summarized <a class="header-anchor" href="#summarized" aria-label="Permalink to &quot;Summarized&quot;">​</a></h2><p>By naming the pieces of your application using CakePHP conventions, you gain functionality without the hassle and maintenance tethers of configuration. Here&#39;s a final example that ties the conventions together:</p><ul><li>Database table: &quot;articles&quot;, &quot;menu_links&quot;</li><li>Table class: <code>ArticlesTable</code>, found at <strong>src/Model/Table/ArticlesTable.php</strong></li><li>Entity class: <code>Article</code>, found at <strong>src/Model/Entity/Article.php</strong></li><li>Controller class: <code>ArticlesController</code>, found at <strong>src/Controller/ArticlesController.php</strong></li><li>View template, found at <strong>templates/Articles/index.php</strong></li></ul><p>Using these conventions, CakePHP knows that a request to <code>http://example.com/articles</code> maps to a call on the <code>index()</code> method of the <code>ArticlesController</code>, where the <code>Articles</code> model is automatically available. None of these relationships have been configured by any means other than by creating classes and files that you&#39;d need to create anyway.</p><table tabindex="0"><thead><tr><th>Example</th><th>articles</th><th>menu_links</th><th></th></tr></thead><tbody><tr><td>Database</td><td>articles</td><td>menu_links</td><td>Table names corresponding to CakePHP</td></tr><tr><td>Table</td><td></td><td></td><td>models are plural and underscored.</td></tr><tr><td>File</td><td>ArticlesController.php</td><td>MenuLinksController.php</td><td></td></tr><tr><td>Table</td><td>ArticlesTable.php</td><td>MenuLinksTable.php</td><td>Table class names are plural,</td></tr><tr><td></td><td></td><td></td><td>CamelCased and end in Table</td></tr><tr><td>Entity</td><td>Article.php</td><td>MenuLink.php</td><td>Entity class names are singular,</td></tr><tr><td></td><td></td><td></td><td>CamelCased: Article and MenuLink</td></tr><tr><td>Class</td><td>ArticlesController</td><td>MenuLinksController</td><td></td></tr><tr><td>Controller</td><td>ArticlesController</td><td>MenuLinksController</td><td>Plural, CamelCased, end in Controller</td></tr><tr><td>Templates</td><td>Articles/index.php</td><td>MenuLinks/index.php</td><td>View template files are named after</td></tr><tr><td></td><td>Articles/add.php</td><td>MenuLinks/add.php</td><td>the controller functions they</td></tr><tr><td></td><td>Articles/get_list.php</td><td>MenuLinks/get_list.php</td><td>display, in an underscored form</td></tr><tr><td>Behavior</td><td>ArticlesBehavior.php</td><td>MenuLinksBehavior.php</td><td></td></tr><tr><td>View</td><td>ArticlesView.php</td><td>MenuLinksView.php</td><td></td></tr><tr><td>Helper</td><td>ArticlesHelper.php</td><td>MenuLinksHelper.php</td><td></td></tr><tr><td>Component</td><td>ArticlesComponent.php</td><td>MenuLinksComponent.php</td><td></td></tr><tr><td>Plugin</td><td>Bad: cakephp/articles</td><td>cakephp/menu-links</td><td>Useful to prefix a CakePHP plugin with &quot;cakephp-&quot;</td></tr><tr><td></td><td>Good: you/cakephp-articles</td><td>you/cakephp-menu-links</td><td>in the package name. Do not use the CakePHP</td></tr><tr><td></td><td></td><td></td><td>namespace (cakephp) as vendor name as this is</td></tr><tr><td></td><td></td><td></td><td>reserved to CakePHP owned plugins. The convention</td></tr><tr><td></td><td></td><td></td><td>is to use lowercase letters and dashes as separator.</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>Each file</td><td>uld be located in the approp</td><td>ate folder/namespace in</td><td>ur app folder.</td></tr></tbody></table><h2 id="database-convention-summary" tabindex="-1">Database Convention Summary <a class="header-anchor" href="#database-convention-summary" aria-label="Permalink to &quot;Database Convention Summary&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Foreign keys</th><th>Relationships are recognized by default as the</th></tr></thead><tbody><tr><td></td><td>(singular) name of the related table followed by <code>_id</code>.</td></tr><tr><td>hasMany</td><td>Users hasMany Articles, <code>articles</code> table will refer</td></tr><tr><td>belongsTo/</td><td>to the <code>users</code> table via a <code>user_id</code> foreign key.</td></tr><tr><td>hasOne</td><td></td></tr><tr><td>BelongsToMany</td><td></td></tr><tr><td></td><td></td></tr><tr><td>Multiple Words</td><td><code>menu_links</code> whose name contains multiple words,</td></tr><tr><td></td><td>the foreign key would be <code>menu_link_id</code>.</td></tr><tr><td>Auto Increment</td><td>In addition to using an auto-incrementing integer as</td></tr><tr><td></td><td>primary keys, you can also use UUID columns.</td></tr><tr><td></td><td>CakePHP will create UUID values automatically</td></tr><tr><td></td><td>using (<code>Cake\\Utility\\Text::uuid()</code>)</td></tr><tr><td></td><td>whenever you save new records using the</td></tr><tr><td></td><td><code>Table::save()</code> method.</td></tr><tr><td>Join tables</td><td>Should be named after the model tables they will join</td></tr><tr><td></td><td>or the bake command won&#39;t work, arranged in alphabetical</td></tr><tr><td></td><td>order (<code>articles_tags</code> rather than <code>tags_articles</code>).</td></tr><tr><td></td><td>Additional columns on the junction table you should create</td></tr><tr><td></td><td>a separate entity/table class for that table.</td></tr></tbody></table><p>Now that you&#39;ve been introduced to CakePHP&#39;s fundamentals, you might try a run through the <a href="/en/tutorials-and-examples/cms/installation.html">tutorials-and-examples/cms/installation</a> to see how things fit together.</p>`,43)])])}const m=t(o,[["render",i]]);export{u as __pageData,m as default};
