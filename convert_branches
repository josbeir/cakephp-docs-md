#!/bin/bash

# CakePHP Documentation Branch Converter
# Fetches specific branches from CakePHP docs repo and converts them to markdown

set -e

REPO_URL="https://github.com/cakephp/docs.git"
TEMP_DIR="temp"
DOCS_DIR="docs"

# Define branches and their numeric versions
declare -A BRANCHES=(
    ["5.x"]="5"
    ["4.x"]="4"
    ["3.x"]="3"
    ["2.x"]="2"
)

# Define languages to process
LANGUAGES=("en" "ja")

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}CakePHP Documentation Branch Converter${NC}"
echo "======================================"

# Check if git is installed
if ! command -v git &> /dev/null; then
    echo -e "${RED}Error: git is required but not installed.${NC}"
    exit 1
fi

# Clean up temp directory if it exists
if [ -d "$TEMP_DIR" ]; then
    echo -e "${YELLOW}Cleaning up existing temp directory...${NC}"
    rm -rf "$TEMP_DIR"
fi

# Create temp directory
mkdir -p "$TEMP_DIR"

# Create docs directory if it doesn't exist
mkdir -p "$DOCS_DIR"

# Process each branch
for branch in "${!BRANCHES[@]}"; do
    version="${BRANCHES[$branch]}"
    branch_dir="$TEMP_DIR/$branch"

    echo ""
    echo -e "${GREEN}Processing branch: $branch (version $version.x)${NC}"
    echo "----------------------------------------"

    # Clone the specific branch with minimal depth and no history
    echo -e "${YELLOW}Fetching branch $branch...${NC}"
    git clone \
        --depth 1 \
        --single-branch \
        --branch "$branch" \
        --no-tags \
        "$REPO_URL" \
        "$branch_dir" \
        --quiet

    # Process each language
    for lang in "${LANGUAGES[@]}"; do
        lang_source_dir="$branch_dir/$lang"

        # Set destination directory based on language
        if [ "$lang" = "en" ]; then
            # English goes to root docs folder
            lang_dest_dir="$DOCS_DIR/$version.x"
        else
            # Other languages go to language-specific subfolder
            lang_dest_dir="$DOCS_DIR/$lang/$version.x"
        fi

        # Check if language directory exists in the branch
        if [ ! -d "$lang_source_dir" ]; then
            echo -e "${YELLOW}Warning: No '$lang/' directory found in branch $branch, skipping $lang...${NC}"
            continue
        fi

        echo -e "${YELLOW}Processing language: $lang${NC}"

        # Create destination directory
        mkdir -p "$lang_dest_dir"

        # Run the convert script with 4 parallel jobs
        echo -e "${YELLOW}Converting $lang RST files to Markdown (using 4 parallel jobs)...${NC}"
        if ./convert "$lang_source_dir" "$lang_dest_dir" 4; then
            echo -e "${GREEN}✓ Successfully converted $lang from branch $branch to $lang_dest_dir${NC}"
        else
            echo -e "${RED}✗ Failed to convert $lang from branch $branch${NC}"
            continue
        fi
    done

    # Clean up this branch directory to save space
    echo -e "${YELLOW}Cleaning up branch directory...${NC}"
    rm -rf "$branch_dir"
done

# Clean up temp directory
echo ""
echo -e "${YELLOW}Cleaning up temp directory...${NC}"
rm -rf "$TEMP_DIR"

echo ""
echo -e "${GREEN}Conversion completed!${NC}"
echo "Converted documentation is available in:"
for branch in "${!BRANCHES[@]}"; do
    version="${BRANCHES[$branch]}"
    for lang in "${LANGUAGES[@]}"; do
        if [ "$lang" = "en" ]; then
            lang_dest_dir="$DOCS_DIR/$version.x"
            display_path="./docs/$version.x/"
        else
            lang_dest_dir="$DOCS_DIR/$lang/$version.x"
            display_path="./docs/$lang/$version.x/"
        fi

        if [ -d "$lang_dest_dir" ]; then
            echo "  - Branch $branch ($lang) → $display_path"
        fi
    done
done

echo ""
echo -e "${YELLOW}Note: You can now use the converted markdown files with your documentation site.${NC}"